<?php


/**
 * Base class that represents a query for the 'hc_agenda_version' table.
 *
 *
 *
 * This class was autogenerated by Propel 1.6.7 on:
 *
 * Mon Apr 21 11:05:06 2014
 *
 * @method AgendaVersionQuery orderById($order = Criteria::ASC) Order by the id column
 * @method AgendaVersionQuery orderByProgramacion($order = Criteria::ASC) Order by the programacion column
 * @method AgendaVersionQuery orderByHora($order = Criteria::ASC) Order by the hora column
 * @method AgendaVersionQuery orderByRetrasoInicial($order = Criteria::ASC) Order by the retraso_inicial column
 * @method AgendaVersionQuery orderByTiempoTotal($order = Criteria::ASC) Order by the tiempo_total column
 * @method AgendaVersionQuery orderByInicio($order = Criteria::ASC) Order by the inicio column
 * @method AgendaVersionQuery orderByLastTime($order = Criteria::ASC) Order by the last_time column
 * @method AgendaVersionQuery orderByIngreso($order = Criteria::ASC) Order by the ingreso column
 * @method AgendaVersionQuery orderBySalaId($order = Criteria::ASC) Order by the sala_id column
 * @method AgendaVersionQuery orderByQuirofanoId($order = Criteria::ASC) Order by the quirofano_id column
 * @method AgendaVersionQuery orderByEgreso($order = Criteria::ASC) Order by the egreso column
 * @method AgendaVersionQuery orderByCie9mc($order = Criteria::ASC) Order by the cie9mc column
 * @method AgendaVersionQuery orderByCie9mcId($order = Criteria::ASC) Order by the cie9mc_id column
 * @method AgendaVersionQuery orderByCxRealizada($order = Criteria::ASC) Order by the cx_realizada column
 * @method AgendaVersionQuery orderByCxRealizadaId($order = Criteria::ASC) Order by the cx_realizada_id column
 * @method AgendaVersionQuery orderByTipoCx($order = Criteria::ASC) Order by the tipo_cx column
 * @method AgendaVersionQuery orderByDiagnostico($order = Criteria::ASC) Order by the diagnostico column
 * @method AgendaVersionQuery orderByDiagnosticoId($order = Criteria::ASC) Order by the diagnostico_id column
 * @method AgendaVersionQuery orderByMedicoName($order = Criteria::ASC) Order by the medico_name column
 * @method AgendaVersionQuery orderByPacienteName($order = Criteria::ASC) Order by the paciente_name column
 * @method AgendaVersionQuery orderByPacienteId($order = Criteria::ASC) Order by the paciente_id column
 * @method AgendaVersionQuery orderByEdad($order = Criteria::ASC) Order by the edad column
 * @method AgendaVersionQuery orderByGenero($order = Criteria::ASC) Order by the genero column
 * @method AgendaVersionQuery orderByGeneroId($order = Criteria::ASC) Order by the genero_id column
 * @method AgendaVersionQuery orderByRegistro($order = Criteria::ASC) Order by the registro column
 * @method AgendaVersionQuery orderByServicio($order = Criteria::ASC) Order by the servicio column
 * @method AgendaVersionQuery orderByAnestesiaId($order = Criteria::ASC) Order by the anestesia_id column
 * @method AgendaVersionQuery orderByAnestesiaEmpleada($order = Criteria::ASC) Order by the anestesia_empleada column
 * @method AgendaVersionQuery orderByEvAdversosAnestesia($order = Criteria::ASC) Order by the ev_adversos_anestesia column
 * @method AgendaVersionQuery orderByObservaciones($order = Criteria::ASC) Order by the observaciones column
 * @method AgendaVersionQuery orderByRequerimiento($order = Criteria::ASC) Order by the requerimiento column
 * @method AgendaVersionQuery orderByReqInsumos($order = Criteria::ASC) Order by the req_insumos column
 * @method AgendaVersionQuery orderByReqHemoderiv($order = Criteria::ASC) Order by the req_hemoderiv column
 * @method AgendaVersionQuery orderByReqLaboratorio($order = Criteria::ASC) Order by the req_laboratorio column
 * @method AgendaVersionQuery orderByReqAnestesico($order = Criteria::ASC) Order by the req_anestesico column
 * @method AgendaVersionQuery orderByStatus($order = Criteria::ASC) Order by the status column
 * @method AgendaVersionQuery orderByCausaDiferidoId($order = Criteria::ASC) Order by the causa_diferido_id column
 * @method AgendaVersionQuery orderBySolicitado($order = Criteria::ASC) Order by the solicitado column
 * @method AgendaVersionQuery orderByRiesgoqxId($order = Criteria::ASC) Order by the riesgoqx_id column
 * @method AgendaVersionQuery orderByContaminacionqxId($order = Criteria::ASC) Order by the contaminacionqx_id column
 * @method AgendaVersionQuery orderByEventoqxId($order = Criteria::ASC) Order by the eventoqx_id column
 * @method AgendaVersionQuery orderByComplicaciones($order = Criteria::ASC) Order by the complicaciones column
 * @method AgendaVersionQuery orderByValPreAnestesica($order = Criteria::ASC) Order by the val_pre_anestesica column
 * @method AgendaVersionQuery orderByReintervencion($order = Criteria::ASC) Order by the reintervencion column
 * @method AgendaVersionQuery orderByPermisos($order = Criteria::ASC) Order by the permisos column
 * @method AgendaVersionQuery orderByTipoProcId($order = Criteria::ASC) Order by the tipo_proc_id column
 * @method AgendaVersionQuery orderByAtencionId($order = Criteria::ASC) Order by the atencion_id column
 * @method AgendaVersionQuery orderByTiempoFuera($order = Criteria::ASC) Order by the tiempo_fuera column
 * @method AgendaVersionQuery orderByProcedencia($order = Criteria::ASC) Order by the procedencia column
 * @method AgendaVersionQuery orderByClasificacionqx($order = Criteria::ASC) Order by the clasificacionqx column
 * @method AgendaVersionQuery orderByRegionPx($order = Criteria::ASC) Order by the region_px column
 * @method AgendaVersionQuery orderByExtensionPx($order = Criteria::ASC) Order by the extension_px column
 * @method AgendaVersionQuery orderByAnexoDetalle($order = Criteria::ASC) Order by the anexo_detalle column
 * @method AgendaVersionQuery orderByDestinoPx($order = Criteria::ASC) Order by the destino_px column
 * @method AgendaVersionQuery orderByLiberacionSala($order = Criteria::ASC) Order by the liberacion_sala column
 * @method AgendaVersionQuery orderByTiempoEst($order = Criteria::ASC) Order by the tiempo_est column
 * @method AgendaVersionQuery orderByRiesgoQxPre($order = Criteria::ASC) Order by the riesgo_qx_pre column
 * @method AgendaVersionQuery orderByShowInIndex($order = Criteria::ASC) Order by the show_in_index column
 * @method AgendaVersionQuery orderByProtocolo($order = Criteria::ASC) Order by the protocolo column
 * @method AgendaVersionQuery orderByCancelada($order = Criteria::ASC) Order by the cancelada column
 * @method AgendaVersionQuery orderBySumary($order = Criteria::ASC) Order by the sumary column
 * @method AgendaVersionQuery orderByCreatedAt($order = Criteria::ASC) Order by the created_at column
 * @method AgendaVersionQuery orderByUpdatedAt($order = Criteria::ASC) Order by the updated_at column
 * @method AgendaVersionQuery orderByVersion($order = Criteria::ASC) Order by the version column
 *
 * @method AgendaVersionQuery groupById() Group by the id column
 * @method AgendaVersionQuery groupByProgramacion() Group by the programacion column
 * @method AgendaVersionQuery groupByHora() Group by the hora column
 * @method AgendaVersionQuery groupByRetrasoInicial() Group by the retraso_inicial column
 * @method AgendaVersionQuery groupByTiempoTotal() Group by the tiempo_total column
 * @method AgendaVersionQuery groupByInicio() Group by the inicio column
 * @method AgendaVersionQuery groupByLastTime() Group by the last_time column
 * @method AgendaVersionQuery groupByIngreso() Group by the ingreso column
 * @method AgendaVersionQuery groupBySalaId() Group by the sala_id column
 * @method AgendaVersionQuery groupByQuirofanoId() Group by the quirofano_id column
 * @method AgendaVersionQuery groupByEgreso() Group by the egreso column
 * @method AgendaVersionQuery groupByCie9mc() Group by the cie9mc column
 * @method AgendaVersionQuery groupByCie9mcId() Group by the cie9mc_id column
 * @method AgendaVersionQuery groupByCxRealizada() Group by the cx_realizada column
 * @method AgendaVersionQuery groupByCxRealizadaId() Group by the cx_realizada_id column
 * @method AgendaVersionQuery groupByTipoCx() Group by the tipo_cx column
 * @method AgendaVersionQuery groupByDiagnostico() Group by the diagnostico column
 * @method AgendaVersionQuery groupByDiagnosticoId() Group by the diagnostico_id column
 * @method AgendaVersionQuery groupByMedicoName() Group by the medico_name column
 * @method AgendaVersionQuery groupByPacienteName() Group by the paciente_name column
 * @method AgendaVersionQuery groupByPacienteId() Group by the paciente_id column
 * @method AgendaVersionQuery groupByEdad() Group by the edad column
 * @method AgendaVersionQuery groupByGenero() Group by the genero column
 * @method AgendaVersionQuery groupByGeneroId() Group by the genero_id column
 * @method AgendaVersionQuery groupByRegistro() Group by the registro column
 * @method AgendaVersionQuery groupByServicio() Group by the servicio column
 * @method AgendaVersionQuery groupByAnestesiaId() Group by the anestesia_id column
 * @method AgendaVersionQuery groupByAnestesiaEmpleada() Group by the anestesia_empleada column
 * @method AgendaVersionQuery groupByEvAdversosAnestesia() Group by the ev_adversos_anestesia column
 * @method AgendaVersionQuery groupByObservaciones() Group by the observaciones column
 * @method AgendaVersionQuery groupByRequerimiento() Group by the requerimiento column
 * @method AgendaVersionQuery groupByReqInsumos() Group by the req_insumos column
 * @method AgendaVersionQuery groupByReqHemoderiv() Group by the req_hemoderiv column
 * @method AgendaVersionQuery groupByReqLaboratorio() Group by the req_laboratorio column
 * @method AgendaVersionQuery groupByReqAnestesico() Group by the req_anestesico column
 * @method AgendaVersionQuery groupByStatus() Group by the status column
 * @method AgendaVersionQuery groupByCausaDiferidoId() Group by the causa_diferido_id column
 * @method AgendaVersionQuery groupBySolicitado() Group by the solicitado column
 * @method AgendaVersionQuery groupByRiesgoqxId() Group by the riesgoqx_id column
 * @method AgendaVersionQuery groupByContaminacionqxId() Group by the contaminacionqx_id column
 * @method AgendaVersionQuery groupByEventoqxId() Group by the eventoqx_id column
 * @method AgendaVersionQuery groupByComplicaciones() Group by the complicaciones column
 * @method AgendaVersionQuery groupByValPreAnestesica() Group by the val_pre_anestesica column
 * @method AgendaVersionQuery groupByReintervencion() Group by the reintervencion column
 * @method AgendaVersionQuery groupByPermisos() Group by the permisos column
 * @method AgendaVersionQuery groupByTipoProcId() Group by the tipo_proc_id column
 * @method AgendaVersionQuery groupByAtencionId() Group by the atencion_id column
 * @method AgendaVersionQuery groupByTiempoFuera() Group by the tiempo_fuera column
 * @method AgendaVersionQuery groupByProcedencia() Group by the procedencia column
 * @method AgendaVersionQuery groupByClasificacionqx() Group by the clasificacionqx column
 * @method AgendaVersionQuery groupByRegionPx() Group by the region_px column
 * @method AgendaVersionQuery groupByExtensionPx() Group by the extension_px column
 * @method AgendaVersionQuery groupByAnexoDetalle() Group by the anexo_detalle column
 * @method AgendaVersionQuery groupByDestinoPx() Group by the destino_px column
 * @method AgendaVersionQuery groupByLiberacionSala() Group by the liberacion_sala column
 * @method AgendaVersionQuery groupByTiempoEst() Group by the tiempo_est column
 * @method AgendaVersionQuery groupByRiesgoQxPre() Group by the riesgo_qx_pre column
 * @method AgendaVersionQuery groupByShowInIndex() Group by the show_in_index column
 * @method AgendaVersionQuery groupByProtocolo() Group by the protocolo column
 * @method AgendaVersionQuery groupByCancelada() Group by the cancelada column
 * @method AgendaVersionQuery groupBySumary() Group by the sumary column
 * @method AgendaVersionQuery groupByCreatedAt() Group by the created_at column
 * @method AgendaVersionQuery groupByUpdatedAt() Group by the updated_at column
 * @method AgendaVersionQuery groupByVersion() Group by the version column
 *
 * @method AgendaVersionQuery leftJoin($relation) Adds a LEFT JOIN clause to the query
 * @method AgendaVersionQuery rightJoin($relation) Adds a RIGHT JOIN clause to the query
 * @method AgendaVersionQuery innerJoin($relation) Adds a INNER JOIN clause to the query
 *
 * @method AgendaVersionQuery leftJoinAgenda($relationAlias = null) Adds a LEFT JOIN clause to the query using the Agenda relation
 * @method AgendaVersionQuery rightJoinAgenda($relationAlias = null) Adds a RIGHT JOIN clause to the query using the Agenda relation
 * @method AgendaVersionQuery innerJoinAgenda($relationAlias = null) Adds a INNER JOIN clause to the query using the Agenda relation
 *
 * @method AgendaVersion findOne(PropelPDO $con = null) Return the first AgendaVersion matching the query
 * @method AgendaVersion findOneOrCreate(PropelPDO $con = null) Return the first AgendaVersion matching the query, or a new AgendaVersion object populated from the query conditions when no match is found
 *
 * @method AgendaVersion findOneById(int $id) Return the first AgendaVersion filtered by the id column
 * @method AgendaVersion findOneByProgramacion(string $programacion) Return the first AgendaVersion filtered by the programacion column
 * @method AgendaVersion findOneByHora(string $hora) Return the first AgendaVersion filtered by the hora column
 * @method AgendaVersion findOneByRetrasoInicial(string $retraso_inicial) Return the first AgendaVersion filtered by the retraso_inicial column
 * @method AgendaVersion findOneByTiempoTotal(string $tiempo_total) Return the first AgendaVersion filtered by the tiempo_total column
 * @method AgendaVersion findOneByInicio(string $inicio) Return the first AgendaVersion filtered by the inicio column
 * @method AgendaVersion findOneByLastTime(string $last_time) Return the first AgendaVersion filtered by the last_time column
 * @method AgendaVersion findOneByIngreso(string $ingreso) Return the first AgendaVersion filtered by the ingreso column
 * @method AgendaVersion findOneBySalaId(int $sala_id) Return the first AgendaVersion filtered by the sala_id column
 * @method AgendaVersion findOneByQuirofanoId(int $quirofano_id) Return the first AgendaVersion filtered by the quirofano_id column
 * @method AgendaVersion findOneByEgreso(string $egreso) Return the first AgendaVersion filtered by the egreso column
 * @method AgendaVersion findOneByCie9mc(string $cie9mc) Return the first AgendaVersion filtered by the cie9mc column
 * @method AgendaVersion findOneByCie9mcId(string $cie9mc_id) Return the first AgendaVersion filtered by the cie9mc_id column
 * @method AgendaVersion findOneByCxRealizada(string $cx_realizada) Return the first AgendaVersion filtered by the cx_realizada column
 * @method AgendaVersion findOneByCxRealizadaId(string $cx_realizada_id) Return the first AgendaVersion filtered by the cx_realizada_id column
 * @method AgendaVersion findOneByTipoCx(int $tipo_cx) Return the first AgendaVersion filtered by the tipo_cx column
 * @method AgendaVersion findOneByDiagnostico(string $diagnostico) Return the first AgendaVersion filtered by the diagnostico column
 * @method AgendaVersion findOneByDiagnosticoId(string $diagnostico_id) Return the first AgendaVersion filtered by the diagnostico_id column
 * @method AgendaVersion findOneByMedicoName(string $medico_name) Return the first AgendaVersion filtered by the medico_name column
 * @method AgendaVersion findOneByPacienteName(string $paciente_name) Return the first AgendaVersion filtered by the paciente_name column
 * @method AgendaVersion findOneByPacienteId(int $paciente_id) Return the first AgendaVersion filtered by the paciente_id column
 * @method AgendaVersion findOneByEdad(string $edad) Return the first AgendaVersion filtered by the edad column
 * @method AgendaVersion findOneByGenero(string $genero) Return the first AgendaVersion filtered by the genero column
 * @method AgendaVersion findOneByGeneroId(int $genero_id) Return the first AgendaVersion filtered by the genero_id column
 * @method AgendaVersion findOneByRegistro(string $registro) Return the first AgendaVersion filtered by the registro column
 * @method AgendaVersion findOneByServicio(int $servicio) Return the first AgendaVersion filtered by the servicio column
 * @method AgendaVersion findOneByAnestesiaId(int $anestesia_id) Return the first AgendaVersion filtered by the anestesia_id column
 * @method AgendaVersion findOneByAnestesiaEmpleada(string $anestesia_empleada) Return the first AgendaVersion filtered by the anestesia_empleada column
 * @method AgendaVersion findOneByEvAdversosAnestesia(string $ev_adversos_anestesia) Return the first AgendaVersion filtered by the ev_adversos_anestesia column
 * @method AgendaVersion findOneByObservaciones(string $observaciones) Return the first AgendaVersion filtered by the observaciones column
 * @method AgendaVersion findOneByRequerimiento(string $requerimiento) Return the first AgendaVersion filtered by the requerimiento column
 * @method AgendaVersion findOneByReqInsumos(string $req_insumos) Return the first AgendaVersion filtered by the req_insumos column
 * @method AgendaVersion findOneByReqHemoderiv(string $req_hemoderiv) Return the first AgendaVersion filtered by the req_hemoderiv column
 * @method AgendaVersion findOneByReqLaboratorio(string $req_laboratorio) Return the first AgendaVersion filtered by the req_laboratorio column
 * @method AgendaVersion findOneByReqAnestesico(string $req_anestesico) Return the first AgendaVersion filtered by the req_anestesico column
 * @method AgendaVersion findOneByStatus(int $status) Return the first AgendaVersion filtered by the status column
 * @method AgendaVersion findOneByCausaDiferidoId(int $causa_diferido_id) Return the first AgendaVersion filtered by the causa_diferido_id column
 * @method AgendaVersion findOneBySolicitado(boolean $solicitado) Return the first AgendaVersion filtered by the solicitado column
 * @method AgendaVersion findOneByRiesgoqxId(int $riesgoqx_id) Return the first AgendaVersion filtered by the riesgoqx_id column
 * @method AgendaVersion findOneByContaminacionqxId(int $contaminacionqx_id) Return the first AgendaVersion filtered by the contaminacionqx_id column
 * @method AgendaVersion findOneByEventoqxId(int $eventoqx_id) Return the first AgendaVersion filtered by the eventoqx_id column
 * @method AgendaVersion findOneByComplicaciones(string $complicaciones) Return the first AgendaVersion filtered by the complicaciones column
 * @method AgendaVersion findOneByValPreAnestesica(string $val_pre_anestesica) Return the first AgendaVersion filtered by the val_pre_anestesica column
 * @method AgendaVersion findOneByReintervencion(boolean $reintervencion) Return the first AgendaVersion filtered by the reintervencion column
 * @method AgendaVersion findOneByPermisos( $permisos) Return the first AgendaVersion filtered by the permisos column
 * @method AgendaVersion findOneByTipoProcId(int $tipo_proc_id) Return the first AgendaVersion filtered by the tipo_proc_id column
 * @method AgendaVersion findOneByAtencionId(int $atencion_id) Return the first AgendaVersion filtered by the atencion_id column
 * @method AgendaVersion findOneByTiempoFuera(boolean $tiempo_fuera) Return the first AgendaVersion filtered by the tiempo_fuera column
 * @method AgendaVersion findOneByProcedencia(string $procedencia) Return the first AgendaVersion filtered by the procedencia column
 * @method AgendaVersion findOneByClasificacionqx(int $clasificacionqx) Return the first AgendaVersion filtered by the clasificacionqx column
 * @method AgendaVersion findOneByRegionPx(int $region_px) Return the first AgendaVersion filtered by the region_px column
 * @method AgendaVersion findOneByExtensionPx(int $extension_px) Return the first AgendaVersion filtered by the extension_px column
 * @method AgendaVersion findOneByAnexoDetalle(int $anexo_detalle) Return the first AgendaVersion filtered by the anexo_detalle column
 * @method AgendaVersion findOneByDestinoPx(int $destino_px) Return the first AgendaVersion filtered by the destino_px column
 * @method AgendaVersion findOneByLiberacionSala(string $liberacion_sala) Return the first AgendaVersion filtered by the liberacion_sala column
 * @method AgendaVersion findOneByTiempoEst(string $tiempo_est) Return the first AgendaVersion filtered by the tiempo_est column
 * @method AgendaVersion findOneByRiesgoQxPre(string $riesgo_qx_pre) Return the first AgendaVersion filtered by the riesgo_qx_pre column
 * @method AgendaVersion findOneByShowInIndex(boolean $show_in_index) Return the first AgendaVersion filtered by the show_in_index column
 * @method AgendaVersion findOneByProtocolo(boolean $protocolo) Return the first AgendaVersion filtered by the protocolo column
 * @method AgendaVersion findOneByCancelada(boolean $cancelada) Return the first AgendaVersion filtered by the cancelada column
 * @method AgendaVersion findOneBySumary(string $sumary) Return the first AgendaVersion filtered by the sumary column
 * @method AgendaVersion findOneByCreatedAt(string $created_at) Return the first AgendaVersion filtered by the created_at column
 * @method AgendaVersion findOneByUpdatedAt(string $updated_at) Return the first AgendaVersion filtered by the updated_at column
 * @method AgendaVersion findOneByVersion(int $version) Return the first AgendaVersion filtered by the version column
 *
 * @method array findById(int $id) Return AgendaVersion objects filtered by the id column
 * @method array findByProgramacion(string $programacion) Return AgendaVersion objects filtered by the programacion column
 * @method array findByHora(string $hora) Return AgendaVersion objects filtered by the hora column
 * @method array findByRetrasoInicial(string $retraso_inicial) Return AgendaVersion objects filtered by the retraso_inicial column
 * @method array findByTiempoTotal(string $tiempo_total) Return AgendaVersion objects filtered by the tiempo_total column
 * @method array findByInicio(string $inicio) Return AgendaVersion objects filtered by the inicio column
 * @method array findByLastTime(string $last_time) Return AgendaVersion objects filtered by the last_time column
 * @method array findByIngreso(string $ingreso) Return AgendaVersion objects filtered by the ingreso column
 * @method array findBySalaId(int $sala_id) Return AgendaVersion objects filtered by the sala_id column
 * @method array findByQuirofanoId(int $quirofano_id) Return AgendaVersion objects filtered by the quirofano_id column
 * @method array findByEgreso(string $egreso) Return AgendaVersion objects filtered by the egreso column
 * @method array findByCie9mc(string $cie9mc) Return AgendaVersion objects filtered by the cie9mc column
 * @method array findByCie9mcId(string $cie9mc_id) Return AgendaVersion objects filtered by the cie9mc_id column
 * @method array findByCxRealizada(string $cx_realizada) Return AgendaVersion objects filtered by the cx_realizada column
 * @method array findByCxRealizadaId(string $cx_realizada_id) Return AgendaVersion objects filtered by the cx_realizada_id column
 * @method array findByTipoCx(int $tipo_cx) Return AgendaVersion objects filtered by the tipo_cx column
 * @method array findByDiagnostico(string $diagnostico) Return AgendaVersion objects filtered by the diagnostico column
 * @method array findByDiagnosticoId(string $diagnostico_id) Return AgendaVersion objects filtered by the diagnostico_id column
 * @method array findByMedicoName(string $medico_name) Return AgendaVersion objects filtered by the medico_name column
 * @method array findByPacienteName(string $paciente_name) Return AgendaVersion objects filtered by the paciente_name column
 * @method array findByPacienteId(int $paciente_id) Return AgendaVersion objects filtered by the paciente_id column
 * @method array findByEdad(string $edad) Return AgendaVersion objects filtered by the edad column
 * @method array findByGenero(string $genero) Return AgendaVersion objects filtered by the genero column
 * @method array findByGeneroId(int $genero_id) Return AgendaVersion objects filtered by the genero_id column
 * @method array findByRegistro(string $registro) Return AgendaVersion objects filtered by the registro column
 * @method array findByServicio(int $servicio) Return AgendaVersion objects filtered by the servicio column
 * @method array findByAnestesiaId(int $anestesia_id) Return AgendaVersion objects filtered by the anestesia_id column
 * @method array findByAnestesiaEmpleada(string $anestesia_empleada) Return AgendaVersion objects filtered by the anestesia_empleada column
 * @method array findByEvAdversosAnestesia(string $ev_adversos_anestesia) Return AgendaVersion objects filtered by the ev_adversos_anestesia column
 * @method array findByObservaciones(string $observaciones) Return AgendaVersion objects filtered by the observaciones column
 * @method array findByRequerimiento(string $requerimiento) Return AgendaVersion objects filtered by the requerimiento column
 * @method array findByReqInsumos(string $req_insumos) Return AgendaVersion objects filtered by the req_insumos column
 * @method array findByReqHemoderiv(string $req_hemoderiv) Return AgendaVersion objects filtered by the req_hemoderiv column
 * @method array findByReqLaboratorio(string $req_laboratorio) Return AgendaVersion objects filtered by the req_laboratorio column
 * @method array findByReqAnestesico(string $req_anestesico) Return AgendaVersion objects filtered by the req_anestesico column
 * @method array findByStatus(int $status) Return AgendaVersion objects filtered by the status column
 * @method array findByCausaDiferidoId(int $causa_diferido_id) Return AgendaVersion objects filtered by the causa_diferido_id column
 * @method array findBySolicitado(boolean $solicitado) Return AgendaVersion objects filtered by the solicitado column
 * @method array findByRiesgoqxId(int $riesgoqx_id) Return AgendaVersion objects filtered by the riesgoqx_id column
 * @method array findByContaminacionqxId(int $contaminacionqx_id) Return AgendaVersion objects filtered by the contaminacionqx_id column
 * @method array findByEventoqxId(int $eventoqx_id) Return AgendaVersion objects filtered by the eventoqx_id column
 * @method array findByComplicaciones(string $complicaciones) Return AgendaVersion objects filtered by the complicaciones column
 * @method array findByValPreAnestesica(string $val_pre_anestesica) Return AgendaVersion objects filtered by the val_pre_anestesica column
 * @method array findByReintervencion(boolean $reintervencion) Return AgendaVersion objects filtered by the reintervencion column
 * @method array findByPermisos( $permisos) Return AgendaVersion objects filtered by the permisos column
 * @method array findByTipoProcId(int $tipo_proc_id) Return AgendaVersion objects filtered by the tipo_proc_id column
 * @method array findByAtencionId(int $atencion_id) Return AgendaVersion objects filtered by the atencion_id column
 * @method array findByTiempoFuera(boolean $tiempo_fuera) Return AgendaVersion objects filtered by the tiempo_fuera column
 * @method array findByProcedencia(string $procedencia) Return AgendaVersion objects filtered by the procedencia column
 * @method array findByClasificacionqx(int $clasificacionqx) Return AgendaVersion objects filtered by the clasificacionqx column
 * @method array findByRegionPx(int $region_px) Return AgendaVersion objects filtered by the region_px column
 * @method array findByExtensionPx(int $extension_px) Return AgendaVersion objects filtered by the extension_px column
 * @method array findByAnexoDetalle(int $anexo_detalle) Return AgendaVersion objects filtered by the anexo_detalle column
 * @method array findByDestinoPx(int $destino_px) Return AgendaVersion objects filtered by the destino_px column
 * @method array findByLiberacionSala(string $liberacion_sala) Return AgendaVersion objects filtered by the liberacion_sala column
 * @method array findByTiempoEst(string $tiempo_est) Return AgendaVersion objects filtered by the tiempo_est column
 * @method array findByRiesgoQxPre(string $riesgo_qx_pre) Return AgendaVersion objects filtered by the riesgo_qx_pre column
 * @method array findByShowInIndex(boolean $show_in_index) Return AgendaVersion objects filtered by the show_in_index column
 * @method array findByProtocolo(boolean $protocolo) Return AgendaVersion objects filtered by the protocolo column
 * @method array findByCancelada(boolean $cancelada) Return AgendaVersion objects filtered by the cancelada column
 * @method array findBySumary(string $sumary) Return AgendaVersion objects filtered by the sumary column
 * @method array findByCreatedAt(string $created_at) Return AgendaVersion objects filtered by the created_at column
 * @method array findByUpdatedAt(string $updated_at) Return AgendaVersion objects filtered by the updated_at column
 * @method array findByVersion(int $version) Return AgendaVersion objects filtered by the version column
 *
 * @package    propel.generator.lib.model.data.om
 */
abstract class BaseAgendaVersionQuery extends ModelCriteria
{
    /**
     * Initializes internal state of BaseAgendaVersionQuery object.
     *
     * @param     string $dbName The dabase name
     * @param     string $modelName The phpName of a model, e.g. 'Book'
     * @param     string $modelAlias The alias for the model in this query, e.g. 'b'
     */
    public function __construct($dbName = 'propel', $modelName = 'AgendaVersion', $modelAlias = null)
    {
        parent::__construct($dbName, $modelName, $modelAlias);
    }

    /**
     * Returns a new AgendaVersionQuery object.
     *
     * @param     string $modelAlias The alias of a model in the query
     * @param     AgendaVersionQuery|Criteria $criteria Optional Criteria to build the query from
     *
     * @return AgendaVersionQuery
     */
    public static function create($modelAlias = null, $criteria = null)
    {
        if ($criteria instanceof AgendaVersionQuery) {
            return $criteria;
        }
        $query = new AgendaVersionQuery();
        if (null !== $modelAlias) {
            $query->setModelAlias($modelAlias);
        }
        if ($criteria instanceof Criteria) {
            $query->mergeWith($criteria);
        }

        return $query;
    }

    /**
     * Find object by primary key.
     * Propel uses the instance pool to skip the database if the object exists.
     * Go fast if the query is untouched.
     *
     * <code>
     * $obj = $c->findPk(array(12, 34), $con);
     * </code>
     *
     * @param array $key Primary key to use for the query
                         A Primary key composition: [$id, $version]
     * @param     PropelPDO $con an optional connection object
     *
     * @return   AgendaVersion|AgendaVersion[]|mixed the result, formatted by the current formatter
     */
    public function findPk($key, $con = null)
    {
        if ($key === null) {
            return null;
        }
        if ((null !== ($obj = AgendaVersionPeer::getInstanceFromPool(serialize(array((string) $key[0], (string) $key[1]))))) && !$this->formatter) {
            // the object is alredy in the instance pool
            return $obj;
        }
        if ($con === null) {
            $con = Propel::getConnection(AgendaVersionPeer::DATABASE_NAME, Propel::CONNECTION_READ);
        }
        $this->basePreSelect($con);
        if ($this->formatter || $this->modelAlias || $this->with || $this->select
         || $this->selectColumns || $this->asColumns || $this->selectModifiers
         || $this->map || $this->having || $this->joins) {
            return $this->findPkComplex($key, $con);
        } else {
            return $this->findPkSimple($key, $con);
        }
    }

    /**
     * Find object by primary key using raw SQL to go fast.
     * Bypass doSelect() and the object formatter by using generated code.
     *
     * @param     mixed $key Primary key to use for the query
     * @param     PropelPDO $con A connection object
     *
     * @return   AgendaVersion A model object, or null if the key is not found
     * @throws   PropelException
     */
    protected function findPkSimple($key, $con)
    {
        $sql = 'SELECT `ID`, `PROGRAMACION`, `HORA`, `RETRASO_INICIAL`, `TIEMPO_TOTAL`, `INICIO`, `LAST_TIME`, `INGRESO`, `SALA_ID`, `QUIROFANO_ID`, `EGRESO`, `CIE9MC`, `CIE9MC_ID`, `CX_REALIZADA`, `CX_REALIZADA_ID`, `TIPO_CX`, `DIAGNOSTICO`, `DIAGNOSTICO_ID`, `MEDICO_NAME`, `PACIENTE_NAME`, `PACIENTE_ID`, `EDAD`, `GENERO`, `GENERO_ID`, `REGISTRO`, `SERVICIO`, `ANESTESIA_ID`, `ANESTESIA_EMPLEADA`, `EV_ADVERSOS_ANESTESIA`, `OBSERVACIONES`, `REQUERIMIENTO`, `REQ_INSUMOS`, `REQ_HEMODERIV`, `REQ_LABORATORIO`, `REQ_ANESTESICO`, `STATUS`, `CAUSA_DIFERIDO_ID`, `SOLICITADO`, `RIESGOQX_ID`, `CONTAMINACIONQX_ID`, `EVENTOQX_ID`, `COMPLICACIONES`, `VAL_PRE_ANESTESICA`, `REINTERVENCION`, `PERMISOS`, `TIPO_PROC_ID`, `ATENCION_ID`, `TIEMPO_FUERA`, `PROCEDENCIA`, `CLASIFICACIONQX`, `REGION_PX`, `EXTENSION_PX`, `ANEXO_DETALLE`, `DESTINO_PX`, `LIBERACION_SALA`, `TIEMPO_EST`, `RIESGO_QX_PRE`, `SHOW_IN_INDEX`, `PROTOCOLO`, `CANCELADA`, `SUMARY`, `CREATED_AT`, `UPDATED_AT`, `VERSION` FROM `hc_agenda_version` WHERE `ID` = :p0 AND `VERSION` = :p1';
        try {
            $stmt = $con->prepare($sql);
            $stmt->bindValue(':p0', $key[0], PDO::PARAM_INT);
            $stmt->bindValue(':p1', $key[1], PDO::PARAM_INT);
            $stmt->execute();
        } catch (Exception $e) {
            Propel::log($e->getMessage(), Propel::LOG_ERR);
            throw new PropelException(sprintf('Unable to execute SELECT statement [%s]', $sql), $e);
        }
        $obj = null;
        if ($row = $stmt->fetch(PDO::FETCH_NUM)) {
            $obj = new AgendaVersion();
            $obj->hydrate($row);
            AgendaVersionPeer::addInstanceToPool($obj, serialize(array((string) $key[0], (string) $key[1])));
        }
        $stmt->closeCursor();

        return $obj;
    }

    /**
     * Find object by primary key.
     *
     * @param     mixed $key Primary key to use for the query
     * @param     PropelPDO $con A connection object
     *
     * @return AgendaVersion|AgendaVersion[]|mixed the result, formatted by the current formatter
     */
    protected function findPkComplex($key, $con)
    {
        // As the query uses a PK condition, no limit(1) is necessary.
        $criteria = $this->isKeepQuery() ? clone $this : $this;
        $stmt = $criteria
            ->filterByPrimaryKey($key)
            ->doSelect($con);

        return $criteria->getFormatter()->init($criteria)->formatOne($stmt);
    }

    /**
     * Find objects by primary key
     * <code>
     * $objs = $c->findPks(array(array(12, 56), array(832, 123), array(123, 456)), $con);
     * </code>
     * @param     array $keys Primary keys to use for the query
     * @param     PropelPDO $con an optional connection object
     *
     * @return PropelObjectCollection|AgendaVersion[]|mixed the list of results, formatted by the current formatter
     */
    public function findPks($keys, $con = null)
    {
        if ($con === null) {
            $con = Propel::getConnection($this->getDbName(), Propel::CONNECTION_READ);
        }
        $this->basePreSelect($con);
        $criteria = $this->isKeepQuery() ? clone $this : $this;
        $stmt = $criteria
            ->filterByPrimaryKeys($keys)
            ->doSelect($con);

        return $criteria->getFormatter()->init($criteria)->format($stmt);
    }

    /**
     * Filter the query by primary key
     *
     * @param     mixed $key Primary key to use for the query
     *
     * @return AgendaVersionQuery The current query, for fluid interface
     */
    public function filterByPrimaryKey($key)
    {
        $this->addUsingAlias(AgendaVersionPeer::ID, $key[0], Criteria::EQUAL);
        $this->addUsingAlias(AgendaVersionPeer::VERSION, $key[1], Criteria::EQUAL);

        return $this;
    }

    /**
     * Filter the query by a list of primary keys
     *
     * @param     array $keys The list of primary key to use for the query
     *
     * @return AgendaVersionQuery The current query, for fluid interface
     */
    public function filterByPrimaryKeys($keys)
    {
        if (empty($keys)) {
            return $this->add(null, '1<>1', Criteria::CUSTOM);
        }
        foreach ($keys as $key) {
            $cton0 = $this->getNewCriterion(AgendaVersionPeer::ID, $key[0], Criteria::EQUAL);
            $cton1 = $this->getNewCriterion(AgendaVersionPeer::VERSION, $key[1], Criteria::EQUAL);
            $cton0->addAnd($cton1);
            $this->addOr($cton0);
        }

        return $this;
    }

    /**
     * Filter the query on the id column
     *
     * Example usage:
     * <code>
     * $query->filterById(1234); // WHERE id = 1234
     * $query->filterById(array(12, 34)); // WHERE id IN (12, 34)
     * $query->filterById(array('min' => 12)); // WHERE id > 12
     * </code>
     *
     * @see       filterByAgenda()
     *
     * @param     mixed $id The value to use as filter.
     *              Use scalar values for equality.
     *              Use array values for in_array() equivalent.
     *              Use associative array('min' => $minValue, 'max' => $maxValue) for intervals.
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return AgendaVersionQuery The current query, for fluid interface
     */
    public function filterById($id = null, $comparison = null)
    {
        if (is_array($id) && null === $comparison) {
            $comparison = Criteria::IN;
        }

        return $this->addUsingAlias(AgendaVersionPeer::ID, $id, $comparison);
    }

    /**
     * Filter the query on the programacion column
     *
     * Example usage:
     * <code>
     * $query->filterByProgramacion('2011-03-14'); // WHERE programacion = '2011-03-14'
     * $query->filterByProgramacion('now'); // WHERE programacion = '2011-03-14'
     * $query->filterByProgramacion(array('max' => 'yesterday')); // WHERE programacion > '2011-03-13'
     * </code>
     *
     * @param     mixed $programacion The value to use as filter.
     *              Values can be integers (unix timestamps), DateTime objects, or strings.
     *              Empty strings are treated as NULL.
     *              Use scalar values for equality.
     *              Use array values for in_array() equivalent.
     *              Use associative array('min' => $minValue, 'max' => $maxValue) for intervals.
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return AgendaVersionQuery The current query, for fluid interface
     */
    public function filterByProgramacion($programacion = null, $comparison = null)
    {
        if (is_array($programacion)) {
            $useMinMax = false;
            if (isset($programacion['min'])) {
                $this->addUsingAlias(AgendaVersionPeer::PROGRAMACION, $programacion['min'], Criteria::GREATER_EQUAL);
                $useMinMax = true;
            }
            if (isset($programacion['max'])) {
                $this->addUsingAlias(AgendaVersionPeer::PROGRAMACION, $programacion['max'], Criteria::LESS_EQUAL);
                $useMinMax = true;
            }
            if ($useMinMax) {
                return $this;
            }
            if (null === $comparison) {
                $comparison = Criteria::IN;
            }
        }

        return $this->addUsingAlias(AgendaVersionPeer::PROGRAMACION, $programacion, $comparison);
    }

    /**
     * Filter the query on the hora column
     *
     * Example usage:
     * <code>
     * $query->filterByHora('2011-03-14'); // WHERE hora = '2011-03-14'
     * $query->filterByHora('now'); // WHERE hora = '2011-03-14'
     * $query->filterByHora(array('max' => 'yesterday')); // WHERE hora > '2011-03-13'
     * </code>
     *
     * @param     mixed $hora The value to use as filter.
     *              Values can be integers (unix timestamps), DateTime objects, or strings.
     *              Empty strings are treated as NULL.
     *              Use scalar values for equality.
     *              Use array values for in_array() equivalent.
     *              Use associative array('min' => $minValue, 'max' => $maxValue) for intervals.
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return AgendaVersionQuery The current query, for fluid interface
     */
    public function filterByHora($hora = null, $comparison = null)
    {
        if (is_array($hora)) {
            $useMinMax = false;
            if (isset($hora['min'])) {
                $this->addUsingAlias(AgendaVersionPeer::HORA, $hora['min'], Criteria::GREATER_EQUAL);
                $useMinMax = true;
            }
            if (isset($hora['max'])) {
                $this->addUsingAlias(AgendaVersionPeer::HORA, $hora['max'], Criteria::LESS_EQUAL);
                $useMinMax = true;
            }
            if ($useMinMax) {
                return $this;
            }
            if (null === $comparison) {
                $comparison = Criteria::IN;
            }
        }

        return $this->addUsingAlias(AgendaVersionPeer::HORA, $hora, $comparison);
    }

    /**
     * Filter the query on the retraso_inicial column
     *
     * Example usage:
     * <code>
     * $query->filterByRetrasoInicial('fooValue');   // WHERE retraso_inicial = 'fooValue'
     * $query->filterByRetrasoInicial('%fooValue%'); // WHERE retraso_inicial LIKE '%fooValue%'
     * </code>
     *
     * @param     string $retrasoInicial The value to use as filter.
     *              Accepts wildcards (* and % trigger a LIKE)
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return AgendaVersionQuery The current query, for fluid interface
     */
    public function filterByRetrasoInicial($retrasoInicial = null, $comparison = null)
    {
        if (null === $comparison) {
            if (is_array($retrasoInicial)) {
                $comparison = Criteria::IN;
            } elseif (preg_match('/[\%\*]/', $retrasoInicial)) {
                $retrasoInicial = str_replace('*', '%', $retrasoInicial);
                $comparison = Criteria::LIKE;
            }
        }

        return $this->addUsingAlias(AgendaVersionPeer::RETRASO_INICIAL, $retrasoInicial, $comparison);
    }

    /**
     * Filter the query on the tiempo_total column
     *
     * Example usage:
     * <code>
     * $query->filterByTiempoTotal('fooValue');   // WHERE tiempo_total = 'fooValue'
     * $query->filterByTiempoTotal('%fooValue%'); // WHERE tiempo_total LIKE '%fooValue%'
     * </code>
     *
     * @param     string $tiempoTotal The value to use as filter.
     *              Accepts wildcards (* and % trigger a LIKE)
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return AgendaVersionQuery The current query, for fluid interface
     */
    public function filterByTiempoTotal($tiempoTotal = null, $comparison = null)
    {
        if (null === $comparison) {
            if (is_array($tiempoTotal)) {
                $comparison = Criteria::IN;
            } elseif (preg_match('/[\%\*]/', $tiempoTotal)) {
                $tiempoTotal = str_replace('*', '%', $tiempoTotal);
                $comparison = Criteria::LIKE;
            }
        }

        return $this->addUsingAlias(AgendaVersionPeer::TIEMPO_TOTAL, $tiempoTotal, $comparison);
    }

    /**
     * Filter the query on the inicio column
     *
     * Example usage:
     * <code>
     * $query->filterByInicio('2011-03-14'); // WHERE inicio = '2011-03-14'
     * $query->filterByInicio('now'); // WHERE inicio = '2011-03-14'
     * $query->filterByInicio(array('max' => 'yesterday')); // WHERE inicio > '2011-03-13'
     * </code>
     *
     * @param     mixed $inicio The value to use as filter.
     *              Values can be integers (unix timestamps), DateTime objects, or strings.
     *              Empty strings are treated as NULL.
     *              Use scalar values for equality.
     *              Use array values for in_array() equivalent.
     *              Use associative array('min' => $minValue, 'max' => $maxValue) for intervals.
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return AgendaVersionQuery The current query, for fluid interface
     */
    public function filterByInicio($inicio = null, $comparison = null)
    {
        if (is_array($inicio)) {
            $useMinMax = false;
            if (isset($inicio['min'])) {
                $this->addUsingAlias(AgendaVersionPeer::INICIO, $inicio['min'], Criteria::GREATER_EQUAL);
                $useMinMax = true;
            }
            if (isset($inicio['max'])) {
                $this->addUsingAlias(AgendaVersionPeer::INICIO, $inicio['max'], Criteria::LESS_EQUAL);
                $useMinMax = true;
            }
            if ($useMinMax) {
                return $this;
            }
            if (null === $comparison) {
                $comparison = Criteria::IN;
            }
        }

        return $this->addUsingAlias(AgendaVersionPeer::INICIO, $inicio, $comparison);
    }

    /**
     * Filter the query on the last_time column
     *
     * Example usage:
     * <code>
     * $query->filterByLastTime('2011-03-14'); // WHERE last_time = '2011-03-14'
     * $query->filterByLastTime('now'); // WHERE last_time = '2011-03-14'
     * $query->filterByLastTime(array('max' => 'yesterday')); // WHERE last_time > '2011-03-13'
     * </code>
     *
     * @param     mixed $lastTime The value to use as filter.
     *              Values can be integers (unix timestamps), DateTime objects, or strings.
     *              Empty strings are treated as NULL.
     *              Use scalar values for equality.
     *              Use array values for in_array() equivalent.
     *              Use associative array('min' => $minValue, 'max' => $maxValue) for intervals.
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return AgendaVersionQuery The current query, for fluid interface
     */
    public function filterByLastTime($lastTime = null, $comparison = null)
    {
        if (is_array($lastTime)) {
            $useMinMax = false;
            if (isset($lastTime['min'])) {
                $this->addUsingAlias(AgendaVersionPeer::LAST_TIME, $lastTime['min'], Criteria::GREATER_EQUAL);
                $useMinMax = true;
            }
            if (isset($lastTime['max'])) {
                $this->addUsingAlias(AgendaVersionPeer::LAST_TIME, $lastTime['max'], Criteria::LESS_EQUAL);
                $useMinMax = true;
            }
            if ($useMinMax) {
                return $this;
            }
            if (null === $comparison) {
                $comparison = Criteria::IN;
            }
        }

        return $this->addUsingAlias(AgendaVersionPeer::LAST_TIME, $lastTime, $comparison);
    }

    /**
     * Filter the query on the ingreso column
     *
     * Example usage:
     * <code>
     * $query->filterByIngreso('2011-03-14'); // WHERE ingreso = '2011-03-14'
     * $query->filterByIngreso('now'); // WHERE ingreso = '2011-03-14'
     * $query->filterByIngreso(array('max' => 'yesterday')); // WHERE ingreso > '2011-03-13'
     * </code>
     *
     * @param     mixed $ingreso The value to use as filter.
     *              Values can be integers (unix timestamps), DateTime objects, or strings.
     *              Empty strings are treated as NULL.
     *              Use scalar values for equality.
     *              Use array values for in_array() equivalent.
     *              Use associative array('min' => $minValue, 'max' => $maxValue) for intervals.
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return AgendaVersionQuery The current query, for fluid interface
     */
    public function filterByIngreso($ingreso = null, $comparison = null)
    {
        if (is_array($ingreso)) {
            $useMinMax = false;
            if (isset($ingreso['min'])) {
                $this->addUsingAlias(AgendaVersionPeer::INGRESO, $ingreso['min'], Criteria::GREATER_EQUAL);
                $useMinMax = true;
            }
            if (isset($ingreso['max'])) {
                $this->addUsingAlias(AgendaVersionPeer::INGRESO, $ingreso['max'], Criteria::LESS_EQUAL);
                $useMinMax = true;
            }
            if ($useMinMax) {
                return $this;
            }
            if (null === $comparison) {
                $comparison = Criteria::IN;
            }
        }

        return $this->addUsingAlias(AgendaVersionPeer::INGRESO, $ingreso, $comparison);
    }

    /**
     * Filter the query on the sala_id column
     *
     * Example usage:
     * <code>
     * $query->filterBySalaId(1234); // WHERE sala_id = 1234
     * $query->filterBySalaId(array(12, 34)); // WHERE sala_id IN (12, 34)
     * $query->filterBySalaId(array('min' => 12)); // WHERE sala_id > 12
     * </code>
     *
     * @param     mixed $salaId The value to use as filter.
     *              Use scalar values for equality.
     *              Use array values for in_array() equivalent.
     *              Use associative array('min' => $minValue, 'max' => $maxValue) for intervals.
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return AgendaVersionQuery The current query, for fluid interface
     */
    public function filterBySalaId($salaId = null, $comparison = null)
    {
        if (is_array($salaId)) {
            $useMinMax = false;
            if (isset($salaId['min'])) {
                $this->addUsingAlias(AgendaVersionPeer::SALA_ID, $salaId['min'], Criteria::GREATER_EQUAL);
                $useMinMax = true;
            }
            if (isset($salaId['max'])) {
                $this->addUsingAlias(AgendaVersionPeer::SALA_ID, $salaId['max'], Criteria::LESS_EQUAL);
                $useMinMax = true;
            }
            if ($useMinMax) {
                return $this;
            }
            if (null === $comparison) {
                $comparison = Criteria::IN;
            }
        }

        return $this->addUsingAlias(AgendaVersionPeer::SALA_ID, $salaId, $comparison);
    }

    /**
     * Filter the query on the quirofano_id column
     *
     * Example usage:
     * <code>
     * $query->filterByQuirofanoId(1234); // WHERE quirofano_id = 1234
     * $query->filterByQuirofanoId(array(12, 34)); // WHERE quirofano_id IN (12, 34)
     * $query->filterByQuirofanoId(array('min' => 12)); // WHERE quirofano_id > 12
     * </code>
     *
     * @param     mixed $quirofanoId The value to use as filter.
     *              Use scalar values for equality.
     *              Use array values for in_array() equivalent.
     *              Use associative array('min' => $minValue, 'max' => $maxValue) for intervals.
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return AgendaVersionQuery The current query, for fluid interface
     */
    public function filterByQuirofanoId($quirofanoId = null, $comparison = null)
    {
        if (is_array($quirofanoId)) {
            $useMinMax = false;
            if (isset($quirofanoId['min'])) {
                $this->addUsingAlias(AgendaVersionPeer::QUIROFANO_ID, $quirofanoId['min'], Criteria::GREATER_EQUAL);
                $useMinMax = true;
            }
            if (isset($quirofanoId['max'])) {
                $this->addUsingAlias(AgendaVersionPeer::QUIROFANO_ID, $quirofanoId['max'], Criteria::LESS_EQUAL);
                $useMinMax = true;
            }
            if ($useMinMax) {
                return $this;
            }
            if (null === $comparison) {
                $comparison = Criteria::IN;
            }
        }

        return $this->addUsingAlias(AgendaVersionPeer::QUIROFANO_ID, $quirofanoId, $comparison);
    }

    /**
     * Filter the query on the egreso column
     *
     * Example usage:
     * <code>
     * $query->filterByEgreso('2011-03-14'); // WHERE egreso = '2011-03-14'
     * $query->filterByEgreso('now'); // WHERE egreso = '2011-03-14'
     * $query->filterByEgreso(array('max' => 'yesterday')); // WHERE egreso > '2011-03-13'
     * </code>
     *
     * @param     mixed $egreso The value to use as filter.
     *              Values can be integers (unix timestamps), DateTime objects, or strings.
     *              Empty strings are treated as NULL.
     *              Use scalar values for equality.
     *              Use array values for in_array() equivalent.
     *              Use associative array('min' => $minValue, 'max' => $maxValue) for intervals.
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return AgendaVersionQuery The current query, for fluid interface
     */
    public function filterByEgreso($egreso = null, $comparison = null)
    {
        if (is_array($egreso)) {
            $useMinMax = false;
            if (isset($egreso['min'])) {
                $this->addUsingAlias(AgendaVersionPeer::EGRESO, $egreso['min'], Criteria::GREATER_EQUAL);
                $useMinMax = true;
            }
            if (isset($egreso['max'])) {
                $this->addUsingAlias(AgendaVersionPeer::EGRESO, $egreso['max'], Criteria::LESS_EQUAL);
                $useMinMax = true;
            }
            if ($useMinMax) {
                return $this;
            }
            if (null === $comparison) {
                $comparison = Criteria::IN;
            }
        }

        return $this->addUsingAlias(AgendaVersionPeer::EGRESO, $egreso, $comparison);
    }

    /**
     * Filter the query on the cie9mc column
     *
     * Example usage:
     * <code>
     * $query->filterByCie9mc('fooValue');   // WHERE cie9mc = 'fooValue'
     * $query->filterByCie9mc('%fooValue%'); // WHERE cie9mc LIKE '%fooValue%'
     * </code>
     *
     * @param     string $cie9mc The value to use as filter.
     *              Accepts wildcards (* and % trigger a LIKE)
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return AgendaVersionQuery The current query, for fluid interface
     */
    public function filterByCie9mc($cie9mc = null, $comparison = null)
    {
        if (null === $comparison) {
            if (is_array($cie9mc)) {
                $comparison = Criteria::IN;
            } elseif (preg_match('/[\%\*]/', $cie9mc)) {
                $cie9mc = str_replace('*', '%', $cie9mc);
                $comparison = Criteria::LIKE;
            }
        }

        return $this->addUsingAlias(AgendaVersionPeer::CIE9MC, $cie9mc, $comparison);
    }

    /**
     * Filter the query on the cie9mc_id column
     *
     * Example usage:
     * <code>
     * $query->filterByCie9mcId('fooValue');   // WHERE cie9mc_id = 'fooValue'
     * $query->filterByCie9mcId('%fooValue%'); // WHERE cie9mc_id LIKE '%fooValue%'
     * </code>
     *
     * @param     string $cie9mcId The value to use as filter.
     *              Accepts wildcards (* and % trigger a LIKE)
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return AgendaVersionQuery The current query, for fluid interface
     */
    public function filterByCie9mcId($cie9mcId = null, $comparison = null)
    {
        if (null === $comparison) {
            if (is_array($cie9mcId)) {
                $comparison = Criteria::IN;
            } elseif (preg_match('/[\%\*]/', $cie9mcId)) {
                $cie9mcId = str_replace('*', '%', $cie9mcId);
                $comparison = Criteria::LIKE;
            }
        }

        return $this->addUsingAlias(AgendaVersionPeer::CIE9MC_ID, $cie9mcId, $comparison);
    }

    /**
     * Filter the query on the cx_realizada column
     *
     * Example usage:
     * <code>
     * $query->filterByCxRealizada('fooValue');   // WHERE cx_realizada = 'fooValue'
     * $query->filterByCxRealizada('%fooValue%'); // WHERE cx_realizada LIKE '%fooValue%'
     * </code>
     *
     * @param     string $cxRealizada The value to use as filter.
     *              Accepts wildcards (* and % trigger a LIKE)
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return AgendaVersionQuery The current query, for fluid interface
     */
    public function filterByCxRealizada($cxRealizada = null, $comparison = null)
    {
        if (null === $comparison) {
            if (is_array($cxRealizada)) {
                $comparison = Criteria::IN;
            } elseif (preg_match('/[\%\*]/', $cxRealizada)) {
                $cxRealizada = str_replace('*', '%', $cxRealizada);
                $comparison = Criteria::LIKE;
            }
        }

        return $this->addUsingAlias(AgendaVersionPeer::CX_REALIZADA, $cxRealizada, $comparison);
    }

    /**
     * Filter the query on the cx_realizada_id column
     *
     * Example usage:
     * <code>
     * $query->filterByCxRealizadaId('fooValue');   // WHERE cx_realizada_id = 'fooValue'
     * $query->filterByCxRealizadaId('%fooValue%'); // WHERE cx_realizada_id LIKE '%fooValue%'
     * </code>
     *
     * @param     string $cxRealizadaId The value to use as filter.
     *              Accepts wildcards (* and % trigger a LIKE)
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return AgendaVersionQuery The current query, for fluid interface
     */
    public function filterByCxRealizadaId($cxRealizadaId = null, $comparison = null)
    {
        if (null === $comparison) {
            if (is_array($cxRealizadaId)) {
                $comparison = Criteria::IN;
            } elseif (preg_match('/[\%\*]/', $cxRealizadaId)) {
                $cxRealizadaId = str_replace('*', '%', $cxRealizadaId);
                $comparison = Criteria::LIKE;
            }
        }

        return $this->addUsingAlias(AgendaVersionPeer::CX_REALIZADA_ID, $cxRealizadaId, $comparison);
    }

    /**
     * Filter the query on the tipo_cx column
     *
     * Example usage:
     * <code>
     * $query->filterByTipoCx(1234); // WHERE tipo_cx = 1234
     * $query->filterByTipoCx(array(12, 34)); // WHERE tipo_cx IN (12, 34)
     * $query->filterByTipoCx(array('min' => 12)); // WHERE tipo_cx > 12
     * </code>
     *
     * @param     mixed $tipoCx The value to use as filter.
     *              Use scalar values for equality.
     *              Use array values for in_array() equivalent.
     *              Use associative array('min' => $minValue, 'max' => $maxValue) for intervals.
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return AgendaVersionQuery The current query, for fluid interface
     */
    public function filterByTipoCx($tipoCx = null, $comparison = null)
    {
        if (is_array($tipoCx)) {
            $useMinMax = false;
            if (isset($tipoCx['min'])) {
                $this->addUsingAlias(AgendaVersionPeer::TIPO_CX, $tipoCx['min'], Criteria::GREATER_EQUAL);
                $useMinMax = true;
            }
            if (isset($tipoCx['max'])) {
                $this->addUsingAlias(AgendaVersionPeer::TIPO_CX, $tipoCx['max'], Criteria::LESS_EQUAL);
                $useMinMax = true;
            }
            if ($useMinMax) {
                return $this;
            }
            if (null === $comparison) {
                $comparison = Criteria::IN;
            }
        }

        return $this->addUsingAlias(AgendaVersionPeer::TIPO_CX, $tipoCx, $comparison);
    }

    /**
     * Filter the query on the diagnostico column
     *
     * Example usage:
     * <code>
     * $query->filterByDiagnostico('fooValue');   // WHERE diagnostico = 'fooValue'
     * $query->filterByDiagnostico('%fooValue%'); // WHERE diagnostico LIKE '%fooValue%'
     * </code>
     *
     * @param     string $diagnostico The value to use as filter.
     *              Accepts wildcards (* and % trigger a LIKE)
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return AgendaVersionQuery The current query, for fluid interface
     */
    public function filterByDiagnostico($diagnostico = null, $comparison = null)
    {
        if (null === $comparison) {
            if (is_array($diagnostico)) {
                $comparison = Criteria::IN;
            } elseif (preg_match('/[\%\*]/', $diagnostico)) {
                $diagnostico = str_replace('*', '%', $diagnostico);
                $comparison = Criteria::LIKE;
            }
        }

        return $this->addUsingAlias(AgendaVersionPeer::DIAGNOSTICO, $diagnostico, $comparison);
    }

    /**
     * Filter the query on the diagnostico_id column
     *
     * Example usage:
     * <code>
     * $query->filterByDiagnosticoId('fooValue');   // WHERE diagnostico_id = 'fooValue'
     * $query->filterByDiagnosticoId('%fooValue%'); // WHERE diagnostico_id LIKE '%fooValue%'
     * </code>
     *
     * @param     string $diagnosticoId The value to use as filter.
     *              Accepts wildcards (* and % trigger a LIKE)
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return AgendaVersionQuery The current query, for fluid interface
     */
    public function filterByDiagnosticoId($diagnosticoId = null, $comparison = null)
    {
        if (null === $comparison) {
            if (is_array($diagnosticoId)) {
                $comparison = Criteria::IN;
            } elseif (preg_match('/[\%\*]/', $diagnosticoId)) {
                $diagnosticoId = str_replace('*', '%', $diagnosticoId);
                $comparison = Criteria::LIKE;
            }
        }

        return $this->addUsingAlias(AgendaVersionPeer::DIAGNOSTICO_ID, $diagnosticoId, $comparison);
    }

    /**
     * Filter the query on the medico_name column
     *
     * Example usage:
     * <code>
     * $query->filterByMedicoName('fooValue');   // WHERE medico_name = 'fooValue'
     * $query->filterByMedicoName('%fooValue%'); // WHERE medico_name LIKE '%fooValue%'
     * </code>
     *
     * @param     string $medicoName The value to use as filter.
     *              Accepts wildcards (* and % trigger a LIKE)
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return AgendaVersionQuery The current query, for fluid interface
     */
    public function filterByMedicoName($medicoName = null, $comparison = null)
    {
        if (null === $comparison) {
            if (is_array($medicoName)) {
                $comparison = Criteria::IN;
            } elseif (preg_match('/[\%\*]/', $medicoName)) {
                $medicoName = str_replace('*', '%', $medicoName);
                $comparison = Criteria::LIKE;
            }
        }

        return $this->addUsingAlias(AgendaVersionPeer::MEDICO_NAME, $medicoName, $comparison);
    }

    /**
     * Filter the query on the paciente_name column
     *
     * Example usage:
     * <code>
     * $query->filterByPacienteName('fooValue');   // WHERE paciente_name = 'fooValue'
     * $query->filterByPacienteName('%fooValue%'); // WHERE paciente_name LIKE '%fooValue%'
     * </code>
     *
     * @param     string $pacienteName The value to use as filter.
     *              Accepts wildcards (* and % trigger a LIKE)
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return AgendaVersionQuery The current query, for fluid interface
     */
    public function filterByPacienteName($pacienteName = null, $comparison = null)
    {
        if (null === $comparison) {
            if (is_array($pacienteName)) {
                $comparison = Criteria::IN;
            } elseif (preg_match('/[\%\*]/', $pacienteName)) {
                $pacienteName = str_replace('*', '%', $pacienteName);
                $comparison = Criteria::LIKE;
            }
        }

        return $this->addUsingAlias(AgendaVersionPeer::PACIENTE_NAME, $pacienteName, $comparison);
    }

    /**
     * Filter the query on the paciente_id column
     *
     * Example usage:
     * <code>
     * $query->filterByPacienteId(1234); // WHERE paciente_id = 1234
     * $query->filterByPacienteId(array(12, 34)); // WHERE paciente_id IN (12, 34)
     * $query->filterByPacienteId(array('min' => 12)); // WHERE paciente_id > 12
     * </code>
     *
     * @param     mixed $pacienteId The value to use as filter.
     *              Use scalar values for equality.
     *              Use array values for in_array() equivalent.
     *              Use associative array('min' => $minValue, 'max' => $maxValue) for intervals.
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return AgendaVersionQuery The current query, for fluid interface
     */
    public function filterByPacienteId($pacienteId = null, $comparison = null)
    {
        if (is_array($pacienteId)) {
            $useMinMax = false;
            if (isset($pacienteId['min'])) {
                $this->addUsingAlias(AgendaVersionPeer::PACIENTE_ID, $pacienteId['min'], Criteria::GREATER_EQUAL);
                $useMinMax = true;
            }
            if (isset($pacienteId['max'])) {
                $this->addUsingAlias(AgendaVersionPeer::PACIENTE_ID, $pacienteId['max'], Criteria::LESS_EQUAL);
                $useMinMax = true;
            }
            if ($useMinMax) {
                return $this;
            }
            if (null === $comparison) {
                $comparison = Criteria::IN;
            }
        }

        return $this->addUsingAlias(AgendaVersionPeer::PACIENTE_ID, $pacienteId, $comparison);
    }

    /**
     * Filter the query on the edad column
     *
     * Example usage:
     * <code>
     * $query->filterByEdad('fooValue');   // WHERE edad = 'fooValue'
     * $query->filterByEdad('%fooValue%'); // WHERE edad LIKE '%fooValue%'
     * </code>
     *
     * @param     string $edad The value to use as filter.
     *              Accepts wildcards (* and % trigger a LIKE)
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return AgendaVersionQuery The current query, for fluid interface
     */
    public function filterByEdad($edad = null, $comparison = null)
    {
        if (null === $comparison) {
            if (is_array($edad)) {
                $comparison = Criteria::IN;
            } elseif (preg_match('/[\%\*]/', $edad)) {
                $edad = str_replace('*', '%', $edad);
                $comparison = Criteria::LIKE;
            }
        }

        return $this->addUsingAlias(AgendaVersionPeer::EDAD, $edad, $comparison);
    }

    /**
     * Filter the query on the genero column
     *
     * Example usage:
     * <code>
     * $query->filterByGenero('fooValue');   // WHERE genero = 'fooValue'
     * $query->filterByGenero('%fooValue%'); // WHERE genero LIKE '%fooValue%'
     * </code>
     *
     * @param     string $genero The value to use as filter.
     *              Accepts wildcards (* and % trigger a LIKE)
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return AgendaVersionQuery The current query, for fluid interface
     */
    public function filterByGenero($genero = null, $comparison = null)
    {
        if (null === $comparison) {
            if (is_array($genero)) {
                $comparison = Criteria::IN;
            } elseif (preg_match('/[\%\*]/', $genero)) {
                $genero = str_replace('*', '%', $genero);
                $comparison = Criteria::LIKE;
            }
        }

        return $this->addUsingAlias(AgendaVersionPeer::GENERO, $genero, $comparison);
    }

    /**
     * Filter the query on the genero_id column
     *
     * Example usage:
     * <code>
     * $query->filterByGeneroId(1234); // WHERE genero_id = 1234
     * $query->filterByGeneroId(array(12, 34)); // WHERE genero_id IN (12, 34)
     * $query->filterByGeneroId(array('min' => 12)); // WHERE genero_id > 12
     * </code>
     *
     * @param     mixed $generoId The value to use as filter.
     *              Use scalar values for equality.
     *              Use array values for in_array() equivalent.
     *              Use associative array('min' => $minValue, 'max' => $maxValue) for intervals.
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return AgendaVersionQuery The current query, for fluid interface
     */
    public function filterByGeneroId($generoId = null, $comparison = null)
    {
        if (is_array($generoId)) {
            $useMinMax = false;
            if (isset($generoId['min'])) {
                $this->addUsingAlias(AgendaVersionPeer::GENERO_ID, $generoId['min'], Criteria::GREATER_EQUAL);
                $useMinMax = true;
            }
            if (isset($generoId['max'])) {
                $this->addUsingAlias(AgendaVersionPeer::GENERO_ID, $generoId['max'], Criteria::LESS_EQUAL);
                $useMinMax = true;
            }
            if ($useMinMax) {
                return $this;
            }
            if (null === $comparison) {
                $comparison = Criteria::IN;
            }
        }

        return $this->addUsingAlias(AgendaVersionPeer::GENERO_ID, $generoId, $comparison);
    }

    /**
     * Filter the query on the registro column
     *
     * Example usage:
     * <code>
     * $query->filterByRegistro('fooValue');   // WHERE registro = 'fooValue'
     * $query->filterByRegistro('%fooValue%'); // WHERE registro LIKE '%fooValue%'
     * </code>
     *
     * @param     string $registro The value to use as filter.
     *              Accepts wildcards (* and % trigger a LIKE)
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return AgendaVersionQuery The current query, for fluid interface
     */
    public function filterByRegistro($registro = null, $comparison = null)
    {
        if (null === $comparison) {
            if (is_array($registro)) {
                $comparison = Criteria::IN;
            } elseif (preg_match('/[\%\*]/', $registro)) {
                $registro = str_replace('*', '%', $registro);
                $comparison = Criteria::LIKE;
            }
        }

        return $this->addUsingAlias(AgendaVersionPeer::REGISTRO, $registro, $comparison);
    }

    /**
     * Filter the query on the servicio column
     *
     * Example usage:
     * <code>
     * $query->filterByServicio(1234); // WHERE servicio = 1234
     * $query->filterByServicio(array(12, 34)); // WHERE servicio IN (12, 34)
     * $query->filterByServicio(array('min' => 12)); // WHERE servicio > 12
     * </code>
     *
     * @param     mixed $servicio The value to use as filter.
     *              Use scalar values for equality.
     *              Use array values for in_array() equivalent.
     *              Use associative array('min' => $minValue, 'max' => $maxValue) for intervals.
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return AgendaVersionQuery The current query, for fluid interface
     */
    public function filterByServicio($servicio = null, $comparison = null)
    {
        if (is_array($servicio)) {
            $useMinMax = false;
            if (isset($servicio['min'])) {
                $this->addUsingAlias(AgendaVersionPeer::SERVICIO, $servicio['min'], Criteria::GREATER_EQUAL);
                $useMinMax = true;
            }
            if (isset($servicio['max'])) {
                $this->addUsingAlias(AgendaVersionPeer::SERVICIO, $servicio['max'], Criteria::LESS_EQUAL);
                $useMinMax = true;
            }
            if ($useMinMax) {
                return $this;
            }
            if (null === $comparison) {
                $comparison = Criteria::IN;
            }
        }

        return $this->addUsingAlias(AgendaVersionPeer::SERVICIO, $servicio, $comparison);
    }

    /**
     * Filter the query on the anestesia_id column
     *
     * Example usage:
     * <code>
     * $query->filterByAnestesiaId(1234); // WHERE anestesia_id = 1234
     * $query->filterByAnestesiaId(array(12, 34)); // WHERE anestesia_id IN (12, 34)
     * $query->filterByAnestesiaId(array('min' => 12)); // WHERE anestesia_id > 12
     * </code>
     *
     * @param     mixed $anestesiaId The value to use as filter.
     *              Use scalar values for equality.
     *              Use array values for in_array() equivalent.
     *              Use associative array('min' => $minValue, 'max' => $maxValue) for intervals.
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return AgendaVersionQuery The current query, for fluid interface
     */
    public function filterByAnestesiaId($anestesiaId = null, $comparison = null)
    {
        if (is_array($anestesiaId)) {
            $useMinMax = false;
            if (isset($anestesiaId['min'])) {
                $this->addUsingAlias(AgendaVersionPeer::ANESTESIA_ID, $anestesiaId['min'], Criteria::GREATER_EQUAL);
                $useMinMax = true;
            }
            if (isset($anestesiaId['max'])) {
                $this->addUsingAlias(AgendaVersionPeer::ANESTESIA_ID, $anestesiaId['max'], Criteria::LESS_EQUAL);
                $useMinMax = true;
            }
            if ($useMinMax) {
                return $this;
            }
            if (null === $comparison) {
                $comparison = Criteria::IN;
            }
        }

        return $this->addUsingAlias(AgendaVersionPeer::ANESTESIA_ID, $anestesiaId, $comparison);
    }

    /**
     * Filter the query on the anestesia_empleada column
     *
     * Example usage:
     * <code>
     * $query->filterByAnestesiaEmpleada('fooValue');   // WHERE anestesia_empleada = 'fooValue'
     * $query->filterByAnestesiaEmpleada('%fooValue%'); // WHERE anestesia_empleada LIKE '%fooValue%'
     * </code>
     *
     * @param     string $anestesiaEmpleada The value to use as filter.
     *              Accepts wildcards (* and % trigger a LIKE)
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return AgendaVersionQuery The current query, for fluid interface
     */
    public function filterByAnestesiaEmpleada($anestesiaEmpleada = null, $comparison = null)
    {
        if (null === $comparison) {
            if (is_array($anestesiaEmpleada)) {
                $comparison = Criteria::IN;
            } elseif (preg_match('/[\%\*]/', $anestesiaEmpleada)) {
                $anestesiaEmpleada = str_replace('*', '%', $anestesiaEmpleada);
                $comparison = Criteria::LIKE;
            }
        }

        return $this->addUsingAlias(AgendaVersionPeer::ANESTESIA_EMPLEADA, $anestesiaEmpleada, $comparison);
    }

    /**
     * Filter the query on the ev_adversos_anestesia column
     *
     * Example usage:
     * <code>
     * $query->filterByEvAdversosAnestesia('fooValue');   // WHERE ev_adversos_anestesia = 'fooValue'
     * $query->filterByEvAdversosAnestesia('%fooValue%'); // WHERE ev_adversos_anestesia LIKE '%fooValue%'
     * </code>
     *
     * @param     string $evAdversosAnestesia The value to use as filter.
     *              Accepts wildcards (* and % trigger a LIKE)
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return AgendaVersionQuery The current query, for fluid interface
     */
    public function filterByEvAdversosAnestesia($evAdversosAnestesia = null, $comparison = null)
    {
        if (null === $comparison) {
            if (is_array($evAdversosAnestesia)) {
                $comparison = Criteria::IN;
            } elseif (preg_match('/[\%\*]/', $evAdversosAnestesia)) {
                $evAdversosAnestesia = str_replace('*', '%', $evAdversosAnestesia);
                $comparison = Criteria::LIKE;
            }
        }

        return $this->addUsingAlias(AgendaVersionPeer::EV_ADVERSOS_ANESTESIA, $evAdversosAnestesia, $comparison);
    }

    /**
     * Filter the query on the observaciones column
     *
     * Example usage:
     * <code>
     * $query->filterByObservaciones('fooValue');   // WHERE observaciones = 'fooValue'
     * $query->filterByObservaciones('%fooValue%'); // WHERE observaciones LIKE '%fooValue%'
     * </code>
     *
     * @param     string $observaciones The value to use as filter.
     *              Accepts wildcards (* and % trigger a LIKE)
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return AgendaVersionQuery The current query, for fluid interface
     */
    public function filterByObservaciones($observaciones = null, $comparison = null)
    {
        if (null === $comparison) {
            if (is_array($observaciones)) {
                $comparison = Criteria::IN;
            } elseif (preg_match('/[\%\*]/', $observaciones)) {
                $observaciones = str_replace('*', '%', $observaciones);
                $comparison = Criteria::LIKE;
            }
        }

        return $this->addUsingAlias(AgendaVersionPeer::OBSERVACIONES, $observaciones, $comparison);
    }

    /**
     * Filter the query on the requerimiento column
     *
     * Example usage:
     * <code>
     * $query->filterByRequerimiento('fooValue');   // WHERE requerimiento = 'fooValue'
     * $query->filterByRequerimiento('%fooValue%'); // WHERE requerimiento LIKE '%fooValue%'
     * </code>
     *
     * @param     string $requerimiento The value to use as filter.
     *              Accepts wildcards (* and % trigger a LIKE)
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return AgendaVersionQuery The current query, for fluid interface
     */
    public function filterByRequerimiento($requerimiento = null, $comparison = null)
    {
        if (null === $comparison) {
            if (is_array($requerimiento)) {
                $comparison = Criteria::IN;
            } elseif (preg_match('/[\%\*]/', $requerimiento)) {
                $requerimiento = str_replace('*', '%', $requerimiento);
                $comparison = Criteria::LIKE;
            }
        }

        return $this->addUsingAlias(AgendaVersionPeer::REQUERIMIENTO, $requerimiento, $comparison);
    }

    /**
     * Filter the query on the req_insumos column
     *
     * Example usage:
     * <code>
     * $query->filterByReqInsumos('fooValue');   // WHERE req_insumos = 'fooValue'
     * $query->filterByReqInsumos('%fooValue%'); // WHERE req_insumos LIKE '%fooValue%'
     * </code>
     *
     * @param     string $reqInsumos The value to use as filter.
     *              Accepts wildcards (* and % trigger a LIKE)
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return AgendaVersionQuery The current query, for fluid interface
     */
    public function filterByReqInsumos($reqInsumos = null, $comparison = null)
    {
        if (null === $comparison) {
            if (is_array($reqInsumos)) {
                $comparison = Criteria::IN;
            } elseif (preg_match('/[\%\*]/', $reqInsumos)) {
                $reqInsumos = str_replace('*', '%', $reqInsumos);
                $comparison = Criteria::LIKE;
            }
        }

        return $this->addUsingAlias(AgendaVersionPeer::REQ_INSUMOS, $reqInsumos, $comparison);
    }

    /**
     * Filter the query on the req_hemoderiv column
     *
     * Example usage:
     * <code>
     * $query->filterByReqHemoderiv('fooValue');   // WHERE req_hemoderiv = 'fooValue'
     * $query->filterByReqHemoderiv('%fooValue%'); // WHERE req_hemoderiv LIKE '%fooValue%'
     * </code>
     *
     * @param     string $reqHemoderiv The value to use as filter.
     *              Accepts wildcards (* and % trigger a LIKE)
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return AgendaVersionQuery The current query, for fluid interface
     */
    public function filterByReqHemoderiv($reqHemoderiv = null, $comparison = null)
    {
        if (null === $comparison) {
            if (is_array($reqHemoderiv)) {
                $comparison = Criteria::IN;
            } elseif (preg_match('/[\%\*]/', $reqHemoderiv)) {
                $reqHemoderiv = str_replace('*', '%', $reqHemoderiv);
                $comparison = Criteria::LIKE;
            }
        }

        return $this->addUsingAlias(AgendaVersionPeer::REQ_HEMODERIV, $reqHemoderiv, $comparison);
    }

    /**
     * Filter the query on the req_laboratorio column
     *
     * Example usage:
     * <code>
     * $query->filterByReqLaboratorio('fooValue');   // WHERE req_laboratorio = 'fooValue'
     * $query->filterByReqLaboratorio('%fooValue%'); // WHERE req_laboratorio LIKE '%fooValue%'
     * </code>
     *
     * @param     string $reqLaboratorio The value to use as filter.
     *              Accepts wildcards (* and % trigger a LIKE)
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return AgendaVersionQuery The current query, for fluid interface
     */
    public function filterByReqLaboratorio($reqLaboratorio = null, $comparison = null)
    {
        if (null === $comparison) {
            if (is_array($reqLaboratorio)) {
                $comparison = Criteria::IN;
            } elseif (preg_match('/[\%\*]/', $reqLaboratorio)) {
                $reqLaboratorio = str_replace('*', '%', $reqLaboratorio);
                $comparison = Criteria::LIKE;
            }
        }

        return $this->addUsingAlias(AgendaVersionPeer::REQ_LABORATORIO, $reqLaboratorio, $comparison);
    }

    /**
     * Filter the query on the req_anestesico column
     *
     * Example usage:
     * <code>
     * $query->filterByReqAnestesico('fooValue');   // WHERE req_anestesico = 'fooValue'
     * $query->filterByReqAnestesico('%fooValue%'); // WHERE req_anestesico LIKE '%fooValue%'
     * </code>
     *
     * @param     string $reqAnestesico The value to use as filter.
     *              Accepts wildcards (* and % trigger a LIKE)
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return AgendaVersionQuery The current query, for fluid interface
     */
    public function filterByReqAnestesico($reqAnestesico = null, $comparison = null)
    {
        if (null === $comparison) {
            if (is_array($reqAnestesico)) {
                $comparison = Criteria::IN;
            } elseif (preg_match('/[\%\*]/', $reqAnestesico)) {
                $reqAnestesico = str_replace('*', '%', $reqAnestesico);
                $comparison = Criteria::LIKE;
            }
        }

        return $this->addUsingAlias(AgendaVersionPeer::REQ_ANESTESICO, $reqAnestesico, $comparison);
    }

    /**
     * Filter the query on the status column
     *
     * Example usage:
     * <code>
     * $query->filterByStatus(1234); // WHERE status = 1234
     * $query->filterByStatus(array(12, 34)); // WHERE status IN (12, 34)
     * $query->filterByStatus(array('min' => 12)); // WHERE status > 12
     * </code>
     *
     * @param     mixed $status The value to use as filter.
     *              Use scalar values for equality.
     *              Use array values for in_array() equivalent.
     *              Use associative array('min' => $minValue, 'max' => $maxValue) for intervals.
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return AgendaVersionQuery The current query, for fluid interface
     */
    public function filterByStatus($status = null, $comparison = null)
    {
        if (is_array($status)) {
            $useMinMax = false;
            if (isset($status['min'])) {
                $this->addUsingAlias(AgendaVersionPeer::STATUS, $status['min'], Criteria::GREATER_EQUAL);
                $useMinMax = true;
            }
            if (isset($status['max'])) {
                $this->addUsingAlias(AgendaVersionPeer::STATUS, $status['max'], Criteria::LESS_EQUAL);
                $useMinMax = true;
            }
            if ($useMinMax) {
                return $this;
            }
            if (null === $comparison) {
                $comparison = Criteria::IN;
            }
        }

        return $this->addUsingAlias(AgendaVersionPeer::STATUS, $status, $comparison);
    }

    /**
     * Filter the query on the causa_diferido_id column
     *
     * Example usage:
     * <code>
     * $query->filterByCausaDiferidoId(1234); // WHERE causa_diferido_id = 1234
     * $query->filterByCausaDiferidoId(array(12, 34)); // WHERE causa_diferido_id IN (12, 34)
     * $query->filterByCausaDiferidoId(array('min' => 12)); // WHERE causa_diferido_id > 12
     * </code>
     *
     * @param     mixed $causaDiferidoId The value to use as filter.
     *              Use scalar values for equality.
     *              Use array values for in_array() equivalent.
     *              Use associative array('min' => $minValue, 'max' => $maxValue) for intervals.
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return AgendaVersionQuery The current query, for fluid interface
     */
    public function filterByCausaDiferidoId($causaDiferidoId = null, $comparison = null)
    {
        if (is_array($causaDiferidoId)) {
            $useMinMax = false;
            if (isset($causaDiferidoId['min'])) {
                $this->addUsingAlias(AgendaVersionPeer::CAUSA_DIFERIDO_ID, $causaDiferidoId['min'], Criteria::GREATER_EQUAL);
                $useMinMax = true;
            }
            if (isset($causaDiferidoId['max'])) {
                $this->addUsingAlias(AgendaVersionPeer::CAUSA_DIFERIDO_ID, $causaDiferidoId['max'], Criteria::LESS_EQUAL);
                $useMinMax = true;
            }
            if ($useMinMax) {
                return $this;
            }
            if (null === $comparison) {
                $comparison = Criteria::IN;
            }
        }

        return $this->addUsingAlias(AgendaVersionPeer::CAUSA_DIFERIDO_ID, $causaDiferidoId, $comparison);
    }

    /**
     * Filter the query on the solicitado column
     *
     * Example usage:
     * <code>
     * $query->filterBySolicitado(true); // WHERE solicitado = true
     * $query->filterBySolicitado('yes'); // WHERE solicitado = true
     * </code>
     *
     * @param     boolean|string $solicitado The value to use as filter.
     *              Non-boolean arguments are converted using the following rules:
     *                * 1, '1', 'true',  'on',  and 'yes' are converted to boolean true
     *                * 0, '0', 'false', 'off', and 'no'  are converted to boolean false
     *              Check on string values is case insensitive (so 'FaLsE' is seen as 'false').
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return AgendaVersionQuery The current query, for fluid interface
     */
    public function filterBySolicitado($solicitado = null, $comparison = null)
    {
        if (is_string($solicitado)) {
            $solicitado = in_array(strtolower($solicitado), array('false', 'off', '-', 'no', 'n', '0', '')) ? false : true;
        }

        return $this->addUsingAlias(AgendaVersionPeer::SOLICITADO, $solicitado, $comparison);
    }

    /**
     * Filter the query on the riesgoqx_id column
     *
     * Example usage:
     * <code>
     * $query->filterByRiesgoqxId(1234); // WHERE riesgoqx_id = 1234
     * $query->filterByRiesgoqxId(array(12, 34)); // WHERE riesgoqx_id IN (12, 34)
     * $query->filterByRiesgoqxId(array('min' => 12)); // WHERE riesgoqx_id > 12
     * </code>
     *
     * @param     mixed $riesgoqxId The value to use as filter.
     *              Use scalar values for equality.
     *              Use array values for in_array() equivalent.
     *              Use associative array('min' => $minValue, 'max' => $maxValue) for intervals.
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return AgendaVersionQuery The current query, for fluid interface
     */
    public function filterByRiesgoqxId($riesgoqxId = null, $comparison = null)
    {
        if (is_array($riesgoqxId)) {
            $useMinMax = false;
            if (isset($riesgoqxId['min'])) {
                $this->addUsingAlias(AgendaVersionPeer::RIESGOQX_ID, $riesgoqxId['min'], Criteria::GREATER_EQUAL);
                $useMinMax = true;
            }
            if (isset($riesgoqxId['max'])) {
                $this->addUsingAlias(AgendaVersionPeer::RIESGOQX_ID, $riesgoqxId['max'], Criteria::LESS_EQUAL);
                $useMinMax = true;
            }
            if ($useMinMax) {
                return $this;
            }
            if (null === $comparison) {
                $comparison = Criteria::IN;
            }
        }

        return $this->addUsingAlias(AgendaVersionPeer::RIESGOQX_ID, $riesgoqxId, $comparison);
    }

    /**
     * Filter the query on the contaminacionqx_id column
     *
     * Example usage:
     * <code>
     * $query->filterByContaminacionqxId(1234); // WHERE contaminacionqx_id = 1234
     * $query->filterByContaminacionqxId(array(12, 34)); // WHERE contaminacionqx_id IN (12, 34)
     * $query->filterByContaminacionqxId(array('min' => 12)); // WHERE contaminacionqx_id > 12
     * </code>
     *
     * @param     mixed $contaminacionqxId The value to use as filter.
     *              Use scalar values for equality.
     *              Use array values for in_array() equivalent.
     *              Use associative array('min' => $minValue, 'max' => $maxValue) for intervals.
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return AgendaVersionQuery The current query, for fluid interface
     */
    public function filterByContaminacionqxId($contaminacionqxId = null, $comparison = null)
    {
        if (is_array($contaminacionqxId)) {
            $useMinMax = false;
            if (isset($contaminacionqxId['min'])) {
                $this->addUsingAlias(AgendaVersionPeer::CONTAMINACIONQX_ID, $contaminacionqxId['min'], Criteria::GREATER_EQUAL);
                $useMinMax = true;
            }
            if (isset($contaminacionqxId['max'])) {
                $this->addUsingAlias(AgendaVersionPeer::CONTAMINACIONQX_ID, $contaminacionqxId['max'], Criteria::LESS_EQUAL);
                $useMinMax = true;
            }
            if ($useMinMax) {
                return $this;
            }
            if (null === $comparison) {
                $comparison = Criteria::IN;
            }
        }

        return $this->addUsingAlias(AgendaVersionPeer::CONTAMINACIONQX_ID, $contaminacionqxId, $comparison);
    }

    /**
     * Filter the query on the eventoqx_id column
     *
     * Example usage:
     * <code>
     * $query->filterByEventoqxId(1234); // WHERE eventoqx_id = 1234
     * $query->filterByEventoqxId(array(12, 34)); // WHERE eventoqx_id IN (12, 34)
     * $query->filterByEventoqxId(array('min' => 12)); // WHERE eventoqx_id > 12
     * </code>
     *
     * @param     mixed $eventoqxId The value to use as filter.
     *              Use scalar values for equality.
     *              Use array values for in_array() equivalent.
     *              Use associative array('min' => $minValue, 'max' => $maxValue) for intervals.
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return AgendaVersionQuery The current query, for fluid interface
     */
    public function filterByEventoqxId($eventoqxId = null, $comparison = null)
    {
        if (is_array($eventoqxId)) {
            $useMinMax = false;
            if (isset($eventoqxId['min'])) {
                $this->addUsingAlias(AgendaVersionPeer::EVENTOQX_ID, $eventoqxId['min'], Criteria::GREATER_EQUAL);
                $useMinMax = true;
            }
            if (isset($eventoqxId['max'])) {
                $this->addUsingAlias(AgendaVersionPeer::EVENTOQX_ID, $eventoqxId['max'], Criteria::LESS_EQUAL);
                $useMinMax = true;
            }
            if ($useMinMax) {
                return $this;
            }
            if (null === $comparison) {
                $comparison = Criteria::IN;
            }
        }

        return $this->addUsingAlias(AgendaVersionPeer::EVENTOQX_ID, $eventoqxId, $comparison);
    }

    /**
     * Filter the query on the complicaciones column
     *
     * Example usage:
     * <code>
     * $query->filterByComplicaciones('fooValue');   // WHERE complicaciones = 'fooValue'
     * $query->filterByComplicaciones('%fooValue%'); // WHERE complicaciones LIKE '%fooValue%'
     * </code>
     *
     * @param     string $complicaciones The value to use as filter.
     *              Accepts wildcards (* and % trigger a LIKE)
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return AgendaVersionQuery The current query, for fluid interface
     */
    public function filterByComplicaciones($complicaciones = null, $comparison = null)
    {
        if (null === $comparison) {
            if (is_array($complicaciones)) {
                $comparison = Criteria::IN;
            } elseif (preg_match('/[\%\*]/', $complicaciones)) {
                $complicaciones = str_replace('*', '%', $complicaciones);
                $comparison = Criteria::LIKE;
            }
        }

        return $this->addUsingAlias(AgendaVersionPeer::COMPLICACIONES, $complicaciones, $comparison);
    }

    /**
     * Filter the query on the val_pre_anestesica column
     *
     * Example usage:
     * <code>
     * $query->filterByValPreAnestesica('fooValue');   // WHERE val_pre_anestesica = 'fooValue'
     * $query->filterByValPreAnestesica('%fooValue%'); // WHERE val_pre_anestesica LIKE '%fooValue%'
     * </code>
     *
     * @param     string $valPreAnestesica The value to use as filter.
     *              Accepts wildcards (* and % trigger a LIKE)
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return AgendaVersionQuery The current query, for fluid interface
     */
    public function filterByValPreAnestesica($valPreAnestesica = null, $comparison = null)
    {
        if (null === $comparison) {
            if (is_array($valPreAnestesica)) {
                $comparison = Criteria::IN;
            } elseif (preg_match('/[\%\*]/', $valPreAnestesica)) {
                $valPreAnestesica = str_replace('*', '%', $valPreAnestesica);
                $comparison = Criteria::LIKE;
            }
        }

        return $this->addUsingAlias(AgendaVersionPeer::VAL_PRE_ANESTESICA, $valPreAnestesica, $comparison);
    }

    /**
     * Filter the query on the reintervencion column
     *
     * Example usage:
     * <code>
     * $query->filterByReintervencion(true); // WHERE reintervencion = true
     * $query->filterByReintervencion('yes'); // WHERE reintervencion = true
     * </code>
     *
     * @param     boolean|string $reintervencion The value to use as filter.
     *              Non-boolean arguments are converted using the following rules:
     *                * 1, '1', 'true',  'on',  and 'yes' are converted to boolean true
     *                * 0, '0', 'false', 'off', and 'no'  are converted to boolean false
     *              Check on string values is case insensitive (so 'FaLsE' is seen as 'false').
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return AgendaVersionQuery The current query, for fluid interface
     */
    public function filterByReintervencion($reintervencion = null, $comparison = null)
    {
        if (is_string($reintervencion)) {
            $reintervencion = in_array(strtolower($reintervencion), array('false', 'off', '-', 'no', 'n', '0', '')) ? false : true;
        }

        return $this->addUsingAlias(AgendaVersionPeer::REINTERVENCION, $reintervencion, $comparison);
    }

    /**
     * Filter the query on the permisos column
     *
     * @param     mixed $permisos The value to use as filter
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return AgendaVersionQuery The current query, for fluid interface
     */
    public function filterByPermisos($permisos = null, $comparison = null)
    {
        if (is_object($permisos)) {
            $permisos = serialize($permisos);
        }

        return $this->addUsingAlias(AgendaVersionPeer::PERMISOS, $permisos, $comparison);
    }

    /**
     * Filter the query on the tipo_proc_id column
     *
     * Example usage:
     * <code>
     * $query->filterByTipoProcId(1234); // WHERE tipo_proc_id = 1234
     * $query->filterByTipoProcId(array(12, 34)); // WHERE tipo_proc_id IN (12, 34)
     * $query->filterByTipoProcId(array('min' => 12)); // WHERE tipo_proc_id > 12
     * </code>
     *
     * @param     mixed $tipoProcId The value to use as filter.
     *              Use scalar values for equality.
     *              Use array values for in_array() equivalent.
     *              Use associative array('min' => $minValue, 'max' => $maxValue) for intervals.
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return AgendaVersionQuery The current query, for fluid interface
     */
    public function filterByTipoProcId($tipoProcId = null, $comparison = null)
    {
        if (is_array($tipoProcId)) {
            $useMinMax = false;
            if (isset($tipoProcId['min'])) {
                $this->addUsingAlias(AgendaVersionPeer::TIPO_PROC_ID, $tipoProcId['min'], Criteria::GREATER_EQUAL);
                $useMinMax = true;
            }
            if (isset($tipoProcId['max'])) {
                $this->addUsingAlias(AgendaVersionPeer::TIPO_PROC_ID, $tipoProcId['max'], Criteria::LESS_EQUAL);
                $useMinMax = true;
            }
            if ($useMinMax) {
                return $this;
            }
            if (null === $comparison) {
                $comparison = Criteria::IN;
            }
        }

        return $this->addUsingAlias(AgendaVersionPeer::TIPO_PROC_ID, $tipoProcId, $comparison);
    }

    /**
     * Filter the query on the atencion_id column
     *
     * Example usage:
     * <code>
     * $query->filterByAtencionId(1234); // WHERE atencion_id = 1234
     * $query->filterByAtencionId(array(12, 34)); // WHERE atencion_id IN (12, 34)
     * $query->filterByAtencionId(array('min' => 12)); // WHERE atencion_id > 12
     * </code>
     *
     * @param     mixed $atencionId The value to use as filter.
     *              Use scalar values for equality.
     *              Use array values for in_array() equivalent.
     *              Use associative array('min' => $minValue, 'max' => $maxValue) for intervals.
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return AgendaVersionQuery The current query, for fluid interface
     */
    public function filterByAtencionId($atencionId = null, $comparison = null)
    {
        if (is_array($atencionId)) {
            $useMinMax = false;
            if (isset($atencionId['min'])) {
                $this->addUsingAlias(AgendaVersionPeer::ATENCION_ID, $atencionId['min'], Criteria::GREATER_EQUAL);
                $useMinMax = true;
            }
            if (isset($atencionId['max'])) {
                $this->addUsingAlias(AgendaVersionPeer::ATENCION_ID, $atencionId['max'], Criteria::LESS_EQUAL);
                $useMinMax = true;
            }
            if ($useMinMax) {
                return $this;
            }
            if (null === $comparison) {
                $comparison = Criteria::IN;
            }
        }

        return $this->addUsingAlias(AgendaVersionPeer::ATENCION_ID, $atencionId, $comparison);
    }

    /**
     * Filter the query on the tiempo_fuera column
     *
     * Example usage:
     * <code>
     * $query->filterByTiempoFuera(true); // WHERE tiempo_fuera = true
     * $query->filterByTiempoFuera('yes'); // WHERE tiempo_fuera = true
     * </code>
     *
     * @param     boolean|string $tiempoFuera The value to use as filter.
     *              Non-boolean arguments are converted using the following rules:
     *                * 1, '1', 'true',  'on',  and 'yes' are converted to boolean true
     *                * 0, '0', 'false', 'off', and 'no'  are converted to boolean false
     *              Check on string values is case insensitive (so 'FaLsE' is seen as 'false').
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return AgendaVersionQuery The current query, for fluid interface
     */
    public function filterByTiempoFuera($tiempoFuera = null, $comparison = null)
    {
        if (is_string($tiempoFuera)) {
            $tiempo_fuera = in_array(strtolower($tiempoFuera), array('false', 'off', '-', 'no', 'n', '0', '')) ? false : true;
        }

        return $this->addUsingAlias(AgendaVersionPeer::TIEMPO_FUERA, $tiempoFuera, $comparison);
    }

    /**
     * Filter the query on the procedencia column
     *
     * Example usage:
     * <code>
     * $query->filterByProcedencia('fooValue');   // WHERE procedencia = 'fooValue'
     * $query->filterByProcedencia('%fooValue%'); // WHERE procedencia LIKE '%fooValue%'
     * </code>
     *
     * @param     string $procedencia The value to use as filter.
     *              Accepts wildcards (* and % trigger a LIKE)
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return AgendaVersionQuery The current query, for fluid interface
     */
    public function filterByProcedencia($procedencia = null, $comparison = null)
    {
        if (null === $comparison) {
            if (is_array($procedencia)) {
                $comparison = Criteria::IN;
            } elseif (preg_match('/[\%\*]/', $procedencia)) {
                $procedencia = str_replace('*', '%', $procedencia);
                $comparison = Criteria::LIKE;
            }
        }

        return $this->addUsingAlias(AgendaVersionPeer::PROCEDENCIA, $procedencia, $comparison);
    }

    /**
     * Filter the query on the clasificacionqx column
     *
     * Example usage:
     * <code>
     * $query->filterByClasificacionqx(1234); // WHERE clasificacionqx = 1234
     * $query->filterByClasificacionqx(array(12, 34)); // WHERE clasificacionqx IN (12, 34)
     * $query->filterByClasificacionqx(array('min' => 12)); // WHERE clasificacionqx > 12
     * </code>
     *
     * @param     mixed $clasificacionqx The value to use as filter.
     *              Use scalar values for equality.
     *              Use array values for in_array() equivalent.
     *              Use associative array('min' => $minValue, 'max' => $maxValue) for intervals.
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return AgendaVersionQuery The current query, for fluid interface
     */
    public function filterByClasificacionqx($clasificacionqx = null, $comparison = null)
    {
        if (is_array($clasificacionqx)) {
            $useMinMax = false;
            if (isset($clasificacionqx['min'])) {
                $this->addUsingAlias(AgendaVersionPeer::CLASIFICACIONQX, $clasificacionqx['min'], Criteria::GREATER_EQUAL);
                $useMinMax = true;
            }
            if (isset($clasificacionqx['max'])) {
                $this->addUsingAlias(AgendaVersionPeer::CLASIFICACIONQX, $clasificacionqx['max'], Criteria::LESS_EQUAL);
                $useMinMax = true;
            }
            if ($useMinMax) {
                return $this;
            }
            if (null === $comparison) {
                $comparison = Criteria::IN;
            }
        }

        return $this->addUsingAlias(AgendaVersionPeer::CLASIFICACIONQX, $clasificacionqx, $comparison);
    }

    /**
     * Filter the query on the region_px column
     *
     * Example usage:
     * <code>
     * $query->filterByRegionPx(1234); // WHERE region_px = 1234
     * $query->filterByRegionPx(array(12, 34)); // WHERE region_px IN (12, 34)
     * $query->filterByRegionPx(array('min' => 12)); // WHERE region_px > 12
     * </code>
     *
     * @param     mixed $regionPx The value to use as filter.
     *              Use scalar values for equality.
     *              Use array values for in_array() equivalent.
     *              Use associative array('min' => $minValue, 'max' => $maxValue) for intervals.
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return AgendaVersionQuery The current query, for fluid interface
     */
    public function filterByRegionPx($regionPx = null, $comparison = null)
    {
        if (is_array($regionPx)) {
            $useMinMax = false;
            if (isset($regionPx['min'])) {
                $this->addUsingAlias(AgendaVersionPeer::REGION_PX, $regionPx['min'], Criteria::GREATER_EQUAL);
                $useMinMax = true;
            }
            if (isset($regionPx['max'])) {
                $this->addUsingAlias(AgendaVersionPeer::REGION_PX, $regionPx['max'], Criteria::LESS_EQUAL);
                $useMinMax = true;
            }
            if ($useMinMax) {
                return $this;
            }
            if (null === $comparison) {
                $comparison = Criteria::IN;
            }
        }

        return $this->addUsingAlias(AgendaVersionPeer::REGION_PX, $regionPx, $comparison);
    }

    /**
     * Filter the query on the extension_px column
     *
     * Example usage:
     * <code>
     * $query->filterByExtensionPx(1234); // WHERE extension_px = 1234
     * $query->filterByExtensionPx(array(12, 34)); // WHERE extension_px IN (12, 34)
     * $query->filterByExtensionPx(array('min' => 12)); // WHERE extension_px > 12
     * </code>
     *
     * @param     mixed $extensionPx The value to use as filter.
     *              Use scalar values for equality.
     *              Use array values for in_array() equivalent.
     *              Use associative array('min' => $minValue, 'max' => $maxValue) for intervals.
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return AgendaVersionQuery The current query, for fluid interface
     */
    public function filterByExtensionPx($extensionPx = null, $comparison = null)
    {
        if (is_array($extensionPx)) {
            $useMinMax = false;
            if (isset($extensionPx['min'])) {
                $this->addUsingAlias(AgendaVersionPeer::EXTENSION_PX, $extensionPx['min'], Criteria::GREATER_EQUAL);
                $useMinMax = true;
            }
            if (isset($extensionPx['max'])) {
                $this->addUsingAlias(AgendaVersionPeer::EXTENSION_PX, $extensionPx['max'], Criteria::LESS_EQUAL);
                $useMinMax = true;
            }
            if ($useMinMax) {
                return $this;
            }
            if (null === $comparison) {
                $comparison = Criteria::IN;
            }
        }

        return $this->addUsingAlias(AgendaVersionPeer::EXTENSION_PX, $extensionPx, $comparison);
    }

    /**
     * Filter the query on the anexo_detalle column
     *
     * Example usage:
     * <code>
     * $query->filterByAnexoDetalle(1234); // WHERE anexo_detalle = 1234
     * $query->filterByAnexoDetalle(array(12, 34)); // WHERE anexo_detalle IN (12, 34)
     * $query->filterByAnexoDetalle(array('min' => 12)); // WHERE anexo_detalle > 12
     * </code>
     *
     * @param     mixed $anexoDetalle The value to use as filter.
     *              Use scalar values for equality.
     *              Use array values for in_array() equivalent.
     *              Use associative array('min' => $minValue, 'max' => $maxValue) for intervals.
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return AgendaVersionQuery The current query, for fluid interface
     */
    public function filterByAnexoDetalle($anexoDetalle = null, $comparison = null)
    {
        if (is_array($anexoDetalle)) {
            $useMinMax = false;
            if (isset($anexoDetalle['min'])) {
                $this->addUsingAlias(AgendaVersionPeer::ANEXO_DETALLE, $anexoDetalle['min'], Criteria::GREATER_EQUAL);
                $useMinMax = true;
            }
            if (isset($anexoDetalle['max'])) {
                $this->addUsingAlias(AgendaVersionPeer::ANEXO_DETALLE, $anexoDetalle['max'], Criteria::LESS_EQUAL);
                $useMinMax = true;
            }
            if ($useMinMax) {
                return $this;
            }
            if (null === $comparison) {
                $comparison = Criteria::IN;
            }
        }

        return $this->addUsingAlias(AgendaVersionPeer::ANEXO_DETALLE, $anexoDetalle, $comparison);
    }

    /**
     * Filter the query on the destino_px column
     *
     * Example usage:
     * <code>
     * $query->filterByDestinoPx(1234); // WHERE destino_px = 1234
     * $query->filterByDestinoPx(array(12, 34)); // WHERE destino_px IN (12, 34)
     * $query->filterByDestinoPx(array('min' => 12)); // WHERE destino_px > 12
     * </code>
     *
     * @param     mixed $destinoPx The value to use as filter.
     *              Use scalar values for equality.
     *              Use array values for in_array() equivalent.
     *              Use associative array('min' => $minValue, 'max' => $maxValue) for intervals.
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return AgendaVersionQuery The current query, for fluid interface
     */
    public function filterByDestinoPx($destinoPx = null, $comparison = null)
    {
        if (is_array($destinoPx)) {
            $useMinMax = false;
            if (isset($destinoPx['min'])) {
                $this->addUsingAlias(AgendaVersionPeer::DESTINO_PX, $destinoPx['min'], Criteria::GREATER_EQUAL);
                $useMinMax = true;
            }
            if (isset($destinoPx['max'])) {
                $this->addUsingAlias(AgendaVersionPeer::DESTINO_PX, $destinoPx['max'], Criteria::LESS_EQUAL);
                $useMinMax = true;
            }
            if ($useMinMax) {
                return $this;
            }
            if (null === $comparison) {
                $comparison = Criteria::IN;
            }
        }

        return $this->addUsingAlias(AgendaVersionPeer::DESTINO_PX, $destinoPx, $comparison);
    }

    /**
     * Filter the query on the liberacion_sala column
     *
     * Example usage:
     * <code>
     * $query->filterByLiberacionSala('2011-03-14'); // WHERE liberacion_sala = '2011-03-14'
     * $query->filterByLiberacionSala('now'); // WHERE liberacion_sala = '2011-03-14'
     * $query->filterByLiberacionSala(array('max' => 'yesterday')); // WHERE liberacion_sala > '2011-03-13'
     * </code>
     *
     * @param     mixed $liberacionSala The value to use as filter.
     *              Values can be integers (unix timestamps), DateTime objects, or strings.
     *              Empty strings are treated as NULL.
     *              Use scalar values for equality.
     *              Use array values for in_array() equivalent.
     *              Use associative array('min' => $minValue, 'max' => $maxValue) for intervals.
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return AgendaVersionQuery The current query, for fluid interface
     */
    public function filterByLiberacionSala($liberacionSala = null, $comparison = null)
    {
        if (is_array($liberacionSala)) {
            $useMinMax = false;
            if (isset($liberacionSala['min'])) {
                $this->addUsingAlias(AgendaVersionPeer::LIBERACION_SALA, $liberacionSala['min'], Criteria::GREATER_EQUAL);
                $useMinMax = true;
            }
            if (isset($liberacionSala['max'])) {
                $this->addUsingAlias(AgendaVersionPeer::LIBERACION_SALA, $liberacionSala['max'], Criteria::LESS_EQUAL);
                $useMinMax = true;
            }
            if ($useMinMax) {
                return $this;
            }
            if (null === $comparison) {
                $comparison = Criteria::IN;
            }
        }

        return $this->addUsingAlias(AgendaVersionPeer::LIBERACION_SALA, $liberacionSala, $comparison);
    }

    /**
     * Filter the query on the tiempo_est column
     *
     * Example usage:
     * <code>
     * $query->filterByTiempoEst('2011-03-14'); // WHERE tiempo_est = '2011-03-14'
     * $query->filterByTiempoEst('now'); // WHERE tiempo_est = '2011-03-14'
     * $query->filterByTiempoEst(array('max' => 'yesterday')); // WHERE tiempo_est > '2011-03-13'
     * </code>
     *
     * @param     mixed $tiempoEst The value to use as filter.
     *              Values can be integers (unix timestamps), DateTime objects, or strings.
     *              Empty strings are treated as NULL.
     *              Use scalar values for equality.
     *              Use array values for in_array() equivalent.
     *              Use associative array('min' => $minValue, 'max' => $maxValue) for intervals.
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return AgendaVersionQuery The current query, for fluid interface
     */
    public function filterByTiempoEst($tiempoEst = null, $comparison = null)
    {
        if (is_array($tiempoEst)) {
            $useMinMax = false;
            if (isset($tiempoEst['min'])) {
                $this->addUsingAlias(AgendaVersionPeer::TIEMPO_EST, $tiempoEst['min'], Criteria::GREATER_EQUAL);
                $useMinMax = true;
            }
            if (isset($tiempoEst['max'])) {
                $this->addUsingAlias(AgendaVersionPeer::TIEMPO_EST, $tiempoEst['max'], Criteria::LESS_EQUAL);
                $useMinMax = true;
            }
            if ($useMinMax) {
                return $this;
            }
            if (null === $comparison) {
                $comparison = Criteria::IN;
            }
        }

        return $this->addUsingAlias(AgendaVersionPeer::TIEMPO_EST, $tiempoEst, $comparison);
    }

    /**
     * Filter the query on the riesgo_qx_pre column
     *
     * Example usage:
     * <code>
     * $query->filterByRiesgoQxPre('fooValue');   // WHERE riesgo_qx_pre = 'fooValue'
     * $query->filterByRiesgoQxPre('%fooValue%'); // WHERE riesgo_qx_pre LIKE '%fooValue%'
     * </code>
     *
     * @param     string $riesgoQxPre The value to use as filter.
     *              Accepts wildcards (* and % trigger a LIKE)
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return AgendaVersionQuery The current query, for fluid interface
     */
    public function filterByRiesgoQxPre($riesgoQxPre = null, $comparison = null)
    {
        if (null === $comparison) {
            if (is_array($riesgoQxPre)) {
                $comparison = Criteria::IN;
            } elseif (preg_match('/[\%\*]/', $riesgoQxPre)) {
                $riesgoQxPre = str_replace('*', '%', $riesgoQxPre);
                $comparison = Criteria::LIKE;
            }
        }

        return $this->addUsingAlias(AgendaVersionPeer::RIESGO_QX_PRE, $riesgoQxPre, $comparison);
    }

    /**
     * Filter the query on the show_in_index column
     *
     * Example usage:
     * <code>
     * $query->filterByShowInIndex(true); // WHERE show_in_index = true
     * $query->filterByShowInIndex('yes'); // WHERE show_in_index = true
     * </code>
     *
     * @param     boolean|string $showInIndex The value to use as filter.
     *              Non-boolean arguments are converted using the following rules:
     *                * 1, '1', 'true',  'on',  and 'yes' are converted to boolean true
     *                * 0, '0', 'false', 'off', and 'no'  are converted to boolean false
     *              Check on string values is case insensitive (so 'FaLsE' is seen as 'false').
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return AgendaVersionQuery The current query, for fluid interface
     */
    public function filterByShowInIndex($showInIndex = null, $comparison = null)
    {
        if (is_string($showInIndex)) {
            $show_in_index = in_array(strtolower($showInIndex), array('false', 'off', '-', 'no', 'n', '0', '')) ? false : true;
        }

        return $this->addUsingAlias(AgendaVersionPeer::SHOW_IN_INDEX, $showInIndex, $comparison);
    }

    /**
     * Filter the query on the protocolo column
     *
     * Example usage:
     * <code>
     * $query->filterByProtocolo(true); // WHERE protocolo = true
     * $query->filterByProtocolo('yes'); // WHERE protocolo = true
     * </code>
     *
     * @param     boolean|string $protocolo The value to use as filter.
     *              Non-boolean arguments are converted using the following rules:
     *                * 1, '1', 'true',  'on',  and 'yes' are converted to boolean true
     *                * 0, '0', 'false', 'off', and 'no'  are converted to boolean false
     *              Check on string values is case insensitive (so 'FaLsE' is seen as 'false').
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return AgendaVersionQuery The current query, for fluid interface
     */
    public function filterByProtocolo($protocolo = null, $comparison = null)
    {
        if (is_string($protocolo)) {
            $protocolo = in_array(strtolower($protocolo), array('false', 'off', '-', 'no', 'n', '0', '')) ? false : true;
        }

        return $this->addUsingAlias(AgendaVersionPeer::PROTOCOLO, $protocolo, $comparison);
    }

    /**
     * Filter the query on the cancelada column
     *
     * Example usage:
     * <code>
     * $query->filterByCancelada(true); // WHERE cancelada = true
     * $query->filterByCancelada('yes'); // WHERE cancelada = true
     * </code>
     *
     * @param     boolean|string $cancelada The value to use as filter.
     *              Non-boolean arguments are converted using the following rules:
     *                * 1, '1', 'true',  'on',  and 'yes' are converted to boolean true
     *                * 0, '0', 'false', 'off', and 'no'  are converted to boolean false
     *              Check on string values is case insensitive (so 'FaLsE' is seen as 'false').
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return AgendaVersionQuery The current query, for fluid interface
     */
    public function filterByCancelada($cancelada = null, $comparison = null)
    {
        if (is_string($cancelada)) {
            $cancelada = in_array(strtolower($cancelada), array('false', 'off', '-', 'no', 'n', '0', '')) ? false : true;
        }

        return $this->addUsingAlias(AgendaVersionPeer::CANCELADA, $cancelada, $comparison);
    }

    /**
     * Filter the query on the sumary column
     *
     * Example usage:
     * <code>
     * $query->filterBySumary('fooValue');   // WHERE sumary = 'fooValue'
     * $query->filterBySumary('%fooValue%'); // WHERE sumary LIKE '%fooValue%'
     * </code>
     *
     * @param     string $sumary The value to use as filter.
     *              Accepts wildcards (* and % trigger a LIKE)
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return AgendaVersionQuery The current query, for fluid interface
     */
    public function filterBySumary($sumary = null, $comparison = null)
    {
        if (null === $comparison) {
            if (is_array($sumary)) {
                $comparison = Criteria::IN;
            } elseif (preg_match('/[\%\*]/', $sumary)) {
                $sumary = str_replace('*', '%', $sumary);
                $comparison = Criteria::LIKE;
            }
        }

        return $this->addUsingAlias(AgendaVersionPeer::SUMARY, $sumary, $comparison);
    }

    /**
     * Filter the query on the created_at column
     *
     * Example usage:
     * <code>
     * $query->filterByCreatedAt('2011-03-14'); // WHERE created_at = '2011-03-14'
     * $query->filterByCreatedAt('now'); // WHERE created_at = '2011-03-14'
     * $query->filterByCreatedAt(array('max' => 'yesterday')); // WHERE created_at > '2011-03-13'
     * </code>
     *
     * @param     mixed $createdAt The value to use as filter.
     *              Values can be integers (unix timestamps), DateTime objects, or strings.
     *              Empty strings are treated as NULL.
     *              Use scalar values for equality.
     *              Use array values for in_array() equivalent.
     *              Use associative array('min' => $minValue, 'max' => $maxValue) for intervals.
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return AgendaVersionQuery The current query, for fluid interface
     */
    public function filterByCreatedAt($createdAt = null, $comparison = null)
    {
        if (is_array($createdAt)) {
            $useMinMax = false;
            if (isset($createdAt['min'])) {
                $this->addUsingAlias(AgendaVersionPeer::CREATED_AT, $createdAt['min'], Criteria::GREATER_EQUAL);
                $useMinMax = true;
            }
            if (isset($createdAt['max'])) {
                $this->addUsingAlias(AgendaVersionPeer::CREATED_AT, $createdAt['max'], Criteria::LESS_EQUAL);
                $useMinMax = true;
            }
            if ($useMinMax) {
                return $this;
            }
            if (null === $comparison) {
                $comparison = Criteria::IN;
            }
        }

        return $this->addUsingAlias(AgendaVersionPeer::CREATED_AT, $createdAt, $comparison);
    }

    /**
     * Filter the query on the updated_at column
     *
     * Example usage:
     * <code>
     * $query->filterByUpdatedAt('2011-03-14'); // WHERE updated_at = '2011-03-14'
     * $query->filterByUpdatedAt('now'); // WHERE updated_at = '2011-03-14'
     * $query->filterByUpdatedAt(array('max' => 'yesterday')); // WHERE updated_at > '2011-03-13'
     * </code>
     *
     * @param     mixed $updatedAt The value to use as filter.
     *              Values can be integers (unix timestamps), DateTime objects, or strings.
     *              Empty strings are treated as NULL.
     *              Use scalar values for equality.
     *              Use array values for in_array() equivalent.
     *              Use associative array('min' => $minValue, 'max' => $maxValue) for intervals.
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return AgendaVersionQuery The current query, for fluid interface
     */
    public function filterByUpdatedAt($updatedAt = null, $comparison = null)
    {
        if (is_array($updatedAt)) {
            $useMinMax = false;
            if (isset($updatedAt['min'])) {
                $this->addUsingAlias(AgendaVersionPeer::UPDATED_AT, $updatedAt['min'], Criteria::GREATER_EQUAL);
                $useMinMax = true;
            }
            if (isset($updatedAt['max'])) {
                $this->addUsingAlias(AgendaVersionPeer::UPDATED_AT, $updatedAt['max'], Criteria::LESS_EQUAL);
                $useMinMax = true;
            }
            if ($useMinMax) {
                return $this;
            }
            if (null === $comparison) {
                $comparison = Criteria::IN;
            }
        }

        return $this->addUsingAlias(AgendaVersionPeer::UPDATED_AT, $updatedAt, $comparison);
    }

    /**
     * Filter the query on the version column
     *
     * Example usage:
     * <code>
     * $query->filterByVersion(1234); // WHERE version = 1234
     * $query->filterByVersion(array(12, 34)); // WHERE version IN (12, 34)
     * $query->filterByVersion(array('min' => 12)); // WHERE version > 12
     * </code>
     *
     * @param     mixed $version The value to use as filter.
     *              Use scalar values for equality.
     *              Use array values for in_array() equivalent.
     *              Use associative array('min' => $minValue, 'max' => $maxValue) for intervals.
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return AgendaVersionQuery The current query, for fluid interface
     */
    public function filterByVersion($version = null, $comparison = null)
    {
        if (is_array($version) && null === $comparison) {
            $comparison = Criteria::IN;
        }

        return $this->addUsingAlias(AgendaVersionPeer::VERSION, $version, $comparison);
    }

    /**
     * Filter the query by a related Agenda object
     *
     * @param   Agenda|PropelObjectCollection $agenda The related object(s) to use as filter
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return   AgendaVersionQuery The current query, for fluid interface
     * @throws   PropelException - if the provided filter is invalid.
     */
    public function filterByAgenda($agenda, $comparison = null)
    {
        if ($agenda instanceof Agenda) {
            return $this
                ->addUsingAlias(AgendaVersionPeer::ID, $agenda->getId(), $comparison);
        } elseif ($agenda instanceof PropelObjectCollection) {
            if (null === $comparison) {
                $comparison = Criteria::IN;
            }

            return $this
                ->addUsingAlias(AgendaVersionPeer::ID, $agenda->toKeyValue('PrimaryKey', 'Id'), $comparison);
        } else {
            throw new PropelException('filterByAgenda() only accepts arguments of type Agenda or PropelCollection');
        }
    }

    /**
     * Adds a JOIN clause to the query using the Agenda relation
     *
     * @param     string $relationAlias optional alias for the relation
     * @param     string $joinType Accepted values are null, 'left join', 'right join', 'inner join'
     *
     * @return AgendaVersionQuery The current query, for fluid interface
     */
    public function joinAgenda($relationAlias = null, $joinType = Criteria::INNER_JOIN)
    {
        $tableMap = $this->getTableMap();
        $relationMap = $tableMap->getRelation('Agenda');

        // create a ModelJoin object for this join
        $join = new ModelJoin();
        $join->setJoinType($joinType);
        $join->setRelationMap($relationMap, $this->useAliasInSQL ? $this->getModelAlias() : null, $relationAlias);
        if ($previousJoin = $this->getPreviousJoin()) {
            $join->setPreviousJoin($previousJoin);
        }

        // add the ModelJoin to the current object
        if ($relationAlias) {
            $this->addAlias($relationAlias, $relationMap->getRightTable()->getName());
            $this->addJoinObject($join, $relationAlias);
        } else {
            $this->addJoinObject($join, 'Agenda');
        }

        return $this;
    }

    /**
     * Use the Agenda relation Agenda object
     *
     * @see       useQuery()
     *
     * @param     string $relationAlias optional alias for the relation,
     *                                   to be used as main alias in the secondary query
     * @param     string $joinType Accepted values are null, 'left join', 'right join', 'inner join'
     *
     * @return   AgendaQuery A secondary query class using the current class as primary query
     */
    public function useAgendaQuery($relationAlias = null, $joinType = Criteria::INNER_JOIN)
    {
        return $this
            ->joinAgenda($relationAlias, $joinType)
            ->useQuery($relationAlias ? $relationAlias : 'Agenda', 'AgendaQuery');
    }

    /**
     * Exclude object from result
     *
     * @param   AgendaVersion $agendaVersion Object to remove from the list of results
     *
     * @return AgendaVersionQuery The current query, for fluid interface
     */
    public function prune($agendaVersion = null)
    {
        if ($agendaVersion) {
            $this->addCond('pruneCond0', $this->getAliasedColName(AgendaVersionPeer::ID), $agendaVersion->getId(), Criteria::NOT_EQUAL);
            $this->addCond('pruneCond1', $this->getAliasedColName(AgendaVersionPeer::VERSION), $agendaVersion->getVersion(), Criteria::NOT_EQUAL);
            $this->combine(array('pruneCond0', 'pruneCond1'), Criteria::LOGICAL_OR);
        }

        return $this;
    }

}
